<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QModInstaller</name>
    </assembly>
    <members>
        <member name="T:QModManager.API.QModHooks">
            <summary>
            Contains some handy delegates to default Unity methods
            </summary>
        </member>
        <member name="F:QModManager.API.QModHooks.Start">
            <summary>
            Hooks into the <see cref="T:UnityEngine.MonoBehaviour"/>.Start() method
            </summary>
        </member>
        <member name="F:QModManager.API.QModHooks.FixedUpdate">
            <summary>
            Hooks into the <see cref="T:UnityEngine.MonoBehaviour"/>.FixedUpdate() method
            </summary>
        </member>
        <member name="F:QModManager.API.QModHooks.LateStart">
            <summary>
            Hooks into the <see cref="T:UnityEngine.MonoBehaviour"/>.Update() method, but is only called once and after <see cref="F:QModManager.API.QModHooks.Start"/>
            </summary>
        </member>
        <member name="F:QModManager.API.QModHooks.Update">
            <summary>
            Hooks into the <see cref="T:UnityEngine.MonoBehaviour"/>.Update() method
            </summary>
        </member>
        <member name="F:QModManager.API.QModHooks.LateUpdate">
            <summary>
            Hooks into the <see cref="T:UnityEngine.MonoBehaviour"/>.LateUpdate() method
            </summary>
        </member>
        <member name="F:QModManager.API.QModHooks.OnApplicationQuit">
            <summary>
            Hooks into the <see cref="T:UnityEngine.MonoBehaviour"/>.OnApplicationQuit() method
            </summary>
        </member>
        <member name="F:QModManager.API.QModHooks.SceneLoaded">
            <summary>
            Hooks into the <see cref="E:UnityEngine.SceneManagement.SceneManager.sceneLoaded"/> event
            </summary>
        </member>
        <member name="F:QModManager.API.QModHooks.OnLoadEnd">
            <summary>
            Invoked after QModManager has finished loading
            </summary>
        </member>
        <member name="P:QModManager.API.QModHooks.LateStartInvoked">
            <summary>
            Whether or not <see cref="F:QModManager.API.QModHooks.LateStart"/> has been invoked
            </summary>
        </member>
        <member name="T:QModManager.API.QModHooks.Delegates">
            <summary>
            The class where all of the delegates are defined
            </summary>
        </member>
        <member name="T:QModManager.API.QModHooks.Delegates.Start">
            <summary>
            Delegate for <see cref="F:QModManager.API.QModHooks.Start"/>
            </summary>
        </member>
        <member name="T:QModManager.API.QModHooks.Delegates.FixedUpdate">
            <summary>
            Delegate for <see cref="F:QModManager.API.QModHooks.FixedUpdate"/>
            </summary>
        </member>
        <member name="T:QModManager.API.QModHooks.Delegates.LateStart">
            <summary>
            Delegate for <see cref="F:QModManager.API.QModHooks.LateStart"/>
            </summary>
        </member>
        <member name="T:QModManager.API.QModHooks.Delegates.Update">
            <summary>
            Delegate for <see cref="F:QModManager.API.QModHooks.Update"/>
            </summary>
        </member>
        <member name="T:QModManager.API.QModHooks.Delegates.LateUpdate">
            <summary>
            Delegate for <see cref="F:QModManager.API.QModHooks.LateUpdate"/>
            </summary>
        </member>
        <member name="T:QModManager.API.QModHooks.Delegates.OnApplicationQuit">
            <summary>
            Delegate for <see cref="F:QModManager.API.QModHooks.OnApplicationQuit"/>
            </summary>
        </member>
        <member name="T:QModManager.API.QModHooks.Delegates.SceneLoaded">
            <summary>
            Delegate for <see cref="F:QModManager.API.QModHooks.SceneLoaded"/>
            </summary>
        </member>
        <member name="T:QModManager.API.QModHooks.Delegates.OnLoadEnd">
            <summary>
            Delegate for <see cref="F:QModManager.API.QModHooks.OnLoadEnd"/>
            </summary>
        </member>
        <member name="T:QModManager.API.QModAPI">
            <summary>
            The main class for the QModManager API
            </summary>
        </member>
        <member name="P:QModManager.API.QModAPI.Main">
            <summary>
            The main instance of this class <para/>
            Used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.QModAPI.MarkAsErrored(System.Reflection.Assembly)">
            <summary>
            Marks a mod as errored <para/>
            The mod will appear in the red pop-up which is shows when the game starts
            </summary>
            <param name="modAssembly">
            The assembly of the mod to mark as errored. <para/>
            If omitted, it will use the calling <see cref="T:System.Reflection.Assembly"/>
            </param>
        </member>
        <member name="M:QModManager.API.QModAPI.GetAllMods(System.Boolean,System.Boolean)">
            <summary>
            Returns a list of all of the mods
            </summary>
            <param name="includeUnloaded">Set to <see langword="true"/> to also include unloaded mods</param>
            <param name="includeErrored">Set to <see langword="true"/> to also include errored mods</param>
            <returns>A read only list of mods containing all of the loaded mods, and optionally unloaded/errored mods</returns>
        </member>
        <member name="M:QModManager.API.QModAPI.GetMyMod">
            <summary>
            Returns the mod from the assembly which called this method
            </summary>
        </member>
        <member name="M:QModManager.API.QModAPI.GetMod(System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.QModAPI.GetMod(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a mod from an ID
            </summary>
            <param name="id"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.QModAPI.ModPresent(System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
            Checks whether or not a mod is present based on its <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.QModAPI.ModPresent(System.String,System.Boolean,System.Boolean)">
            <summary>
            Checks whether or not a mod is present based on its ID
            </summary>
            <param name="id"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#MarkAsErrored">
            <summary>
            Marks a mod as errored <para/>
            The mod will appear in the red pop-up which is shows when the game starts
            </summary>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#MarkAsErrored(System.Reflection.Assembly)">
            <summary>
            Marks a mod as errored <para/>
            The mod will appear in the red pop-up which is shows when the game starts
            </summary>
            <param name="modAssembly">
            The assembly of the mod to mark as errored. <para/>
            </param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#GetAllMods">
            <summary>
            Returns a list of all of the mods
            </summary>
            <returns>A read only list of mods containing all of the loaded mods</returns>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#GetAllMods(System.Boolean)">
            <summary>
            Returns a list of all of the mods
            </summary>
            <param name="includeUnloaded">Set to <see langword="true"/> to also include unloaded mods</param>
            <returns>A read only list of mods containing all of the loaded mods, and optionally unloaded mods</returns>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#GetAllMods(System.Boolean,System.Boolean)">
            <summary>
            Returns a list of all of the mods
            </summary>
            <param name="includeUnloaded">Set to <see langword="true"/> to also include unloaded mods</param>
            <param name="includeErrored">Set to <see langword="true"/> to also include errored mods</param>
            <returns>A read only list of mods containing all of the loaded mods, and optionally unloaded/errored mods</returns>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#GetMyMod">
            <summary>
            Returns the mod from the assembly which called this method
            </summary>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#GetMod(System.Reflection.Assembly)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#GetMod(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#GetMod(System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#GetMod(System.String)">
            <summary>
            Returns a mod from an ID
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#GetMod(System.String,System.Boolean)">
            <summary>
            Returns a mod from an ID
            </summary>
            <param name="id"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#GetMod(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a mod from an ID
            </summary>
            <param name="id"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#ModPresent(System.Reflection.Assembly)">
            <summary>
            Checks whether or not a mod is present based on its <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#ModPresent(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Checks whether or not a mod is present based on its <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#ModPresent(System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
            Checks whether or not a mod is present based on its <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#ModPresent(System.String)">
            <summary>
            Checks whether or not a mod is present based on its ID
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#ModPresent(System.String,System.Boolean)">
            <summary>
            Checks whether or not a mod is present based on its ID
            </summary>
            <param name="id"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.QModAPI.QModManager#API#IQModAPI#ModPresent(System.String,System.Boolean,System.Boolean)">
            <summary>
            Checks whether or not a mod is present based on its ID
            </summary>
            <param name="id"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="T:QModManager.API.IQModAPI">
            <summary>
            The interface used by <see cref="T:QModManager.API.QModAPI"/> <para/>
            Designed for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.IQModAPI.MarkAsErrored">
            <summary>
            Marks a mod as errored <para/>
            The mod will appear in the red pop-up which is shows when the game starts
            </summary>
        </member>
        <member name="M:QModManager.API.IQModAPI.MarkAsErrored(System.Reflection.Assembly)">
            <summary>
            Marks a mod as errored <para/>
            The mod will appear in the red pop-up which is shows when the game starts
            </summary>
            <param name="modAssembly">
            The assembly of the mod to mark as errored. <para/>
            </param>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetAllMods">
            <summary>
            Returns a list of all of the mods
            </summary>
            <returns>A read only list of mods containing all of the loaded mods</returns>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetAllMods(System.Boolean)">
            <summary>
            Returns a list of all of the mods
            </summary>
            <param name="includeUnloaded">Set to <see langword="true"/> to also include unloaded mods</param>
            <returns>A read only list of mods containing all of the loaded mods, and optionally unloaded mods</returns>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetAllMods(System.Boolean,System.Boolean)">
            <summary>
            Returns a list of all of the mods
            </summary>
            <param name="includeUnloaded">Set to <see langword="true"/> to also include unloaded mods</param>
            <param name="includeErrored">Set to <see langword="true"/> to also include errored mods</param>
            <returns>A read only list of mods containing all of the loaded mods, and optionally unloaded/errored mods</returns>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMyMod">
            <summary>
            Returns the mod from the assembly which called this method
            </summary>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMod(System.Reflection.Assembly)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMod(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMod(System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMod(System.String)">
            <summary>
            Returns a mod from an ID
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMod(System.String,System.Boolean)">
            <summary>
            Returns a mod from an ID
            </summary>
            <param name="id"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMod(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a mod from an ID
            </summary>
            <param name="id"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.IQModAPI.ModPresent(System.Reflection.Assembly)">
            <summary>
            Checks whether or not a mod is present based on its <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
        </member>
        <member name="M:QModManager.API.IQModAPI.ModPresent(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Checks whether or not a mod is present based on its <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.IQModAPI.ModPresent(System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
            Checks whether or not a mod is present based on its <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.IQModAPI.ModPresent(System.String)">
            <summary>
            Checks whether or not a mod is present based on its ID
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:QModManager.API.IQModAPI.ModPresent(System.String,System.Boolean)">
            <summary>
            Checks whether or not a mod is present based on its ID
            </summary>
            <param name="id"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
        </member>
        <member name="M:QModManager.API.IQModAPI.ModPresent(System.String,System.Boolean,System.Boolean)">
            <summary>
            Checks whether or not a mod is present based on its ID
            </summary>
            <param name="id"></param>
            <param name="includeUnloaded">Whether or not to include unloaded mods</param>
            <param name="includeErrored">Whether or not to include unloaded mods</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode">
            <summary>
            Basic data structure of a crafting tree node.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode.Action">
            <summary>
            The action this node takes in the crafting tree.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode.TechType">
            <summary>
            The tech type ID associated to this node.
            For item nodes, it is the item ID to be crafted.
            For root and tab nodes, this is always <see cref="F:TechType.None"/>.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode.Name">
            <summary>
            The name ID for this tab node.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode.CraftNode">
            <summary>
            The the in-game representation of this node.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode.RemoveNode">
            <summary>
            Removes the calling node from parent. 
            </summary>
        </member>
        <member name="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode">
            <summary>
            Abstract class that provides methods for adding new nodes into the crafting tree.
            </summary>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode" />
        </member>
        <member name="F:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode.ChildNodes">
            <summary>
            The child nodes linked bellow this node.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode.AddTabNode(System.String,System.String,Atlas.Sprite)">
            <summary>
            Creates a new tab node for the crafting tree and links it to the calling node.
            </summary>
            <param name="nameID">The name/ID of this node.</param>
            <param name="displayText">The hover text to display in-game.</param>
            <param name="sprite">The custom sprite to display on this tab node.</param>
            <returns>A new tab node linked to the root node and ready to use.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode.AddTabNode(System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Creates a new tab node for the crafting tree and links it to the calling node.
            </summary>
            <param name="nameID">The name/ID of this node.</param>
            <param name="displayText">The hover text to display in-game.</param>
            <param name="sprite">The custom sprite to display on this tab node.</param>
            <returns>A new tab node linked to the root node and ready to use.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode.AddTabNode(System.String)">
            <summary>
            Creates a new tab node for the crafting tree and links it to the calling node.
            </summary>
            <param name="nameID">The name/ID of this node.</param>
            <returns>A new tab node linked to the root node and ready to use.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode.GetTabNode(System.String)">
            <summary>
            Gets the tab from the calling node.
            </summary>
            <param name="nameID">The name id of the tab to get.</param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode.GetCraftingNode(TechType)">
            <summary>
            Gets the crafting node from the calling node.
            </summary>
            <param name="techType">The TechType whose node to get.</param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode.GetNode(System.String)">
            <summary>
            Gets the node associated with the ID specified. Used if you don't know whether node is a tab or a craft node.
            </summary>
            <param name="nameID"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode.AddCraftingNode(TechType)">
            <summary>
            Creates a new crafting node for the crafting tree and links it to the calling node.
            </summary>
            <param name="techType">The TechType to be crafted.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode.AddCraftingNode(TechType[])">
            <summary>
            Creates a collection of new crafting nodes for the crafting tree and links it to the calling node.
            </summary>
            <param name="techTypes">The TechTypes to be crafted.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode.AddCraftingNode(System.Collections.Generic.IEnumerable{TechType})">
            <summary>
            Creates a collection of new crafting nodes for the crafting tree and links it to the calling node.
            </summary>
            <param name="techTypes">The TechTypes to be crafted.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode.AddModdedCraftingNode(System.String)">
            <summary>
            <para>Creates a new crafting node for a modded item and links it to the calling node.</para>
            <para>If the modded item isn't present for the player, this call is safely ignored.</para>
            </summary>
            <param name="moddedTechTypeName">The internal name of the custom TechType to be crafted.</param>
            <remarks>
            If the player doesn't have the mod for this TechType installed, then nothing will happen.
            </remarks>
        </member>
        <member name="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeRoot">
            <summary>
            The root node of a CraftTree. The whole tree starts here.
            </summary>    
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode" />
        </member>
        <member name="P:QModManager.API.SMLHelper.Crafting.ModCraftTreeRoot.CraftTree">
            <summary>
            Dynamically creates the CraftTree object for this crafting tree.
            The CraftNode objects were created and linked as the classes of the ModCraftTreeFamily were created and linked.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeRoot.CreateFromExistingTree(CraftNode,QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode@)">
            <summary>
            Populates a new ModCraftTreeRoot from a CraftNode tree.
            </summary>
            <param name="tree">The tree to create the ModCraftTreeRoot from.</param>
            <param name="root"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeRoot.GetTabNode(System.String[])">
            <summary>
            Gets the tab node at the specified path from the root.
            </summary>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>
            <returns>If the specified tab node is found, returns that <see cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeTab"/>; Otherwise, returns null.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.ModCraftTreeRoot.GetNode(System.String[])">
            <summary>
            Gets the node at the specified path from the root.
            </summary>
            <param name="stepsToNode">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>
            <returns>If the specified tab node is found, returns that <see cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode"/>; Otherwise, returns null.</returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeTab">
            <summary>
            A tab node of a CraftTree. Tab nodes help organize crafting nodes by grouping them into categories.
            </summary>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode" />
        </member>
        <member name="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeCraft">
            <summary>
            A crafting node of a CraftTree. This is the last node on a tree; The one that actually crafts something.
            </summary>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode" />
        </member>
        <member name="T:QModManager.API.SMLHelper.Crafting.TechData">
            <summary>
            A class that fully describes a recipe for a <see cref="T:TechType"/> identified item.
            </summary>
            <seealso cref="T:ITechData" />
        </member>
        <member name="P:QModManager.API.SMLHelper.Crafting.TechData.craftAmount">
            <summary>
            Gets or sets the how many copies of the item are created when crafting this recipe.
            </summary>
            <value>
            The quantity of the item this recipe yields.
            </value>
        </member>
        <member name="P:QModManager.API.SMLHelper.Crafting.TechData.ingredientCount">
            <summary>
            Gets the number of different ingredients for this recipe.
            </summary>
            <value>
            The number of ingredients for this recipe.
            </value>
        </member>
        <member name="P:QModManager.API.SMLHelper.Crafting.TechData.linkedItemCount">
            <summary>
            Gets the number of items linked to this recipe.
            </summary>
            <value>
            The number of linked items.
            </value>
        </member>
        <member name="F:QModManager.API.SMLHelper.Crafting.TechData.Ingredients">
            <summary>
            The list of ingredients required for this recipe.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Crafting.TechData.LinkedItems">
            <summary>
            The items that will also be created when this recipe is crafted.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.TechData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.SMLHelper.Crafting.TechData"/> class a custom recipe.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.TechData.#ctor(System.Collections.Generic.List{QModManager.API.SMLHelper.Crafting.Ingredient})">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.SMLHelper.Crafting.TechData"/> class for a custom recipe with a list of ingridients.
            </summary>
            <param name="ingredients">The ingredients.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.TechData.#ctor(QModManager.API.SMLHelper.Crafting.Ingredient[])">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.SMLHelper.Crafting.TechData"/> class for a custom recipe with a collection of ingridients.
            </summary>
            <param name="ingredients">The ingredients.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.TechData.#ctor(System.Collections.Generic.List{TechType})">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.SMLHelper.Crafting.TechData"/> class for a custom recipe with a list of ingridients.
            </summary>
            <param name="ingredients">The ingredients.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.TechData.#ctor(TechType[])">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.SMLHelper.Crafting.TechData"/> class for a custom recipe with a collection of ingridients.
            </summary>
            <param name="ingredients">The ingredients.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.TechData.GetIngredient(System.Int32)">
            <summary>
            Gets the ingredient at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:IIngredient"/> at the requested the index if the index is value; Otherwise returns null.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.TechData.GetLinkedItem(System.Int32)">
            <summary>
            Gets the linked item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:TechType"/> at the requested the index if the index is value; Otherwise returns null.</returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Crafting.Ingredient">
            <summary>
            A class for representing a required ingredient in a recipe.
            </summary>
            <seealso cref="T:IIngredient" />
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.TechData"/>
        </member>
        <member name="P:QModManager.API.SMLHelper.Crafting.Ingredient.techType">
            <summary>
            Gets or sets the item ID.
            </summary>
            <value>
            The item ID.
            </value>
        </member>
        <member name="P:QModManager.API.SMLHelper.Crafting.Ingredient.amount">
            <summary>
            Gets or sets the number of this item required for the recipe.
            </summary>
            <value>
            The amount of this item needed for the recipe.
            </value>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.Ingredient.#ctor(TechType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.SMLHelper.Crafting.Ingredient"/> class.
            </summary>
            <param name="techType">The item ID.</param>
            <param name="amount">The number of instances of this item required for the recipe.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Crafting.Ingredient.op_Implicit(TechType)~QModManager.API.SMLHelper.Crafting.Ingredient">
            <summary>
            Turn a <see cref="T:TechType"/> into an <see cref="T:QModManager.API.SMLHelper.Crafting.Ingredient"/> with amount of 1
            </summary>
            <param name="techType"></param>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFish.id">
            <summary>
            The id to use to create the creature. This should be unique
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFish.displayName">
            <summary>
            The display name for your fish. This is shown in the inventory, and can be whatever you want
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFish.tooltip">
            <summary>
            The short description of your fish in the inventory
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFish.spriteFileName">
            <summary>
            The file name of your fish's sprite in the inventory. You can leave this null if your fish isn't pickupable. The file is relative
            from the QMods folder, e.g. "MinecraftFish/Assets/cod.png"
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFish.modelPrefab">
            <summary>
            The model to use to create the creature. This would ideally only have renderer/collider components attached, but will still work if it has behaviours
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFish.isPickupable">
            <summary>
            Determines whether your creature can be picked up by the player
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFish.isWaterCreature">
            <summary>
            Determines whether the creature moves on land or in water. Default true, which is in water. Land creature AI does not work ATM.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFish.swimSpeed">
            <summary>
            The speed at which your creature will swim
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFish.swimInterval">
            <summary>
            The interval (in seconds) between when your fish will find a new position to swim to
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFish.swimRadius">
            <summary>
            The area in which your creature will look for a random position when swimming. This should be larger for larger creatures
            </summary>
        </member>
        <member name="T:QModManager.API.SMLHelper.Assets.CustomFishPrefab">
            <summary>
            Class used by CustomFish for constructing a prefab based on the values provided by the user.
            You can use this yourself if you want, but you will need to manually provide a TechType
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFishPrefab.modelPrefab">
            <summary>
            The model to use to create the creature. This would ideally only have renderer/collider components attached, but will still work if it has behaviours
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFishPrefab.pickupable">
            <summary>
            Determines whether your creature can be picked up
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFishPrefab.isWaterCreature">
            <summary>
            Determines whether your creature walks or swims. Only works for swimming at the moment, land will probably be fixed at a later time
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFishPrefab.swimSpeed">
            <summary>
            The speed at which your creature moves
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFishPrefab.swimRadius">
            <summary>
            The area in which your creature's AI will look for a new spot to move to
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.CustomFishPrefab.swimInterval">
            <summary>
            The interval in seconds between when your creature finds a new spot to move to
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.CustomFishPrefab.#ctor(System.String,System.String,TechType)">
            <summary>
            Creates a new <see cref="T:QModManager.API.SMLHelper.Assets.CustomFishPrefab"/> with the given values
            </summary>
            <param name="classId"></param>
            <param name="prefabFileName"></param>
            <param name="techType"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.CustomFishPrefab.GetGameObject">
            <summary>
            Gets the prefab game object
            </summary>
        </member>
        <member name="T:QModManager.API.SMLHelper.Assets.ModPrefab">
            <summary>
            The abstract class to inherit when you want to add new PreFabs into the game.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.ModPrefab.ClassID">
            <summary>
            The class identifier used for the <see cref="T:PrefabIdentifier" /> component whenever applicable.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.ModPrefab.PrefabFileName">
            <summary>
            Name of the prefab file.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.ModPrefab.TechType">
            <summary>
            The <see cref="P:QModManager.API.SMLHelper.Assets.ModPrefab.TechType"/> of the corresponding item.
            Used for <see cref="T:QModManager.API.SMLHelper.MonoBehaviours.Fixer" />, <see cref="T:TechTag" />, and <see cref="T:Constructable" /> components whenever applicable.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.ModPrefab.#ctor(System.String,System.String,TechType)">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.SMLHelper.Assets.ModPrefab" /> class.
            </summary>
            <param name="classId">The class identifier used for the <see cref="T:PrefabIdentifier" /> component whenever applicable.</param>
            <param name="prefabFileName">Name of the prefab file.</param>
            <param name="techType">The techtype of the corresponding item. 
            Used for the <see cref="T:QModManager.API.SMLHelper.MonoBehaviours.Fixer" />, <see cref="T:TechTag" />, and <see cref="T:Constructable" /> components whenever applicable.
            Can also be set later in the constructor if it is not yet provided.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.ModPrefab.GetGameObject">
            <summary>
            Gets the prefab game object. Set up your prefab components here.
            The <see cref="P:QModManager.API.SMLHelper.Assets.ModPrefab.TechType"/> and ClassID are already handled.
            </summary>
            <returns>The game object to be instantiated into a new in-game entity.</returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Assets.ModSprite">
            <summary>
            A class that handles a custom sprite and what item it is associated to.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.ModSprite.TechType">
            <summary>
            The tech type of a specific item associated with this sprite.
            Can be <see cref="F:TechType.None"/> if this sprite is for used on a group.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.ModSprite.Sprite">
            <summary>
            The actual sprite used in-game when this sprite is references.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.ModSprite.Group">
            <summary>
            The group that this sprite belongs to. 
            Can be <see cref="F:SpriteManager.Group.None"/> if this sprite is for used on an item.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.ModSprite.Id">
            <summary>
            The internal identifier of this sprite when it isn't associated to an item.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.ModSprite.#ctor(TechType,Atlas.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific TechType.
            Created with an Atlas Sprite.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.ModSprite.#ctor(SpriteManager.Group,System.String,Atlas.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific group and internal ID.
            Created with an Atlas Sprite.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.ModSprite.#ctor(SpriteManager.Group,TechType,Atlas.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific group and internal ID.
            Created with an Atlas Sprite.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.ModSprite.#ctor(SpriteManager.Group,System.String,UnityEngine.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific group and internal ID.
            Created with a UnityEngine Sprite.
            </summary>
            <param name="group">The sprite group this sprite will be added to.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.ModSprite.#ctor(TechType,UnityEngine.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific TechType.
            Created with a UnityEngine Sprite.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Assets.Buildable">
            <summary>
            An item that can be built into the game world.
            </summary>
            <seealso cref="T:QModManager.API.SMLHelper.Assets.PDAItem" />
            <seealso cref="T:QModManager.API.SMLHelper.Assets.Spawnable"/>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.Buildable.HandOverText">
            <summary>
            Override with the text to be displayed when your hover the cursor over the built item.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.Buildable.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:QModManager.API.SMLHelper.Assets.Buildable"/>, the basic class for any item that can built using the Habitat Builder Tool.
            </summary>
            <param name="classId">The main internal identifier for this item. Your item's <see cref="T:TechType" /> will be created using this name.</param>
            <param name="friendlyName">The name displayed in-game for this item whether in the open world or in the inventory.</param>
            <param name="description">The description for this item; Typically seen in the PDA, inventory, or crafting screens.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Assets.Craftable">
            <summary>
            An item that can be crafted into the game world.
            </summary>
            <seealso cref="T:QModManager.API.SMLHelper.Assets.PDAItem" />
            <seealso cref="T:QModManager.API.SMLHelper.Assets.Spawnable" />
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.Craftable.FabricatorType">
            <summary>
            Override with the fabricator that crafts this item.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.Craftable.StepsToFabricatorTab">
            <summary>
            Override with the tab node steps to take to get to the tab you want the item's blueprint to appear in.
            If not overriden, the item will appear at the craft tree's root.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.Craftable.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:QModManager.API.SMLHelper.Assets.Craftable"/>, the basic class for any item that can be crafted at a fabricator.
            </summary>
            <param name="classId">The main internal identifier for this item. Your item's <see cref="T:TechType" /> will be created using this name.</param>
            <param name="friendlyName">The name displayed in-game for this item whether in the open world or in the inventory.</param>
            <param name="description">The description for this item; Typically seen in the PDA, inventory, or crafting screens.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Assets.PDAItem">
            <summary>
            A <see cref="T:QModManager.API.SMLHelper.Assets.Spawnable"/> item that appears in the PDA blueprints.
            </summary>
            <seealso cref="T:QModManager.API.SMLHelper.Assets.Spawnable" />
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.PDAItem.RequiredForUnlock">
            <summary>
            Override to set the <see cref="T:TechType"/> that must first be scanned or picked up to unlock the blueprint for this item. <para/>
            If not overriden, it this item will be unlocked from the start of the game.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.PDAItem.GroupForPDA">
            <summary>
            Override with the main group in the PDA blueprints where this item appears.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.PDAItem.CategoryForPDA">
            <summary>
            Override with the category within the group in the PDA blueprints where this item appears.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.PDAItem.UnlockedAtStart">
            <summary>
            Gets a value indicating whether <see cref="P:QModManager.API.SMLHelper.Assets.PDAItem.RequiredForUnlock"/> has been set to lock this blueprint behind another <see cref="T:TechType"/>.
            </summary>
            <value>
              Returns <c>true</c> if will be unlocked from the start of the game; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:QModManager.API.SMLHelper.Assets.PDAItem.RequiredForUnlock"/>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.PDAItem.DiscoverMessage">
            <summary>
            Message which should be shown when the item is unlocked. <para/>
            If not overridden, the message will default to Subnautica's (language key "<see langword="NotificationBlueprintUnlocked"/>").
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.PDAItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:QModManager.API.SMLHelper.Assets.PDAItem"/>, the basic class for any item that appears among your PDA blueprints. <para/>
            DO NOT USE THIS CLASS DIRECTLY! Use <seealso cref="T:QModManager.API.SMLHelper.Assets.Craftable"/> or <see cref="T:QModManager.API.SMLHelper.Assets.Buildable"/> instead.
            </summary>
            <param name="classId">The main internal identifier for this item. Your item's <see cref="T:TechType" /> will be created using this name.</param>
            <param name="friendlyName">The name displayed in-game for this item whether in the open world or in the inventory.</param>
            <param name="description">The description for this item; Typically seen in the PDA, inventory, or crafting screens.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.PDAItem.GetBlueprintRecipe">
            <summary>
            This provides the <see cref="T:QModManager.API.SMLHelper.Crafting.TechData"/> instance used to designate how this item is crafted or constructed.
            </summary>
        </member>
        <member name="T:QModManager.API.SMLHelper.Assets.Spawnable">
            <summary>
            An item that can be spawned into the game.
            </summary>
            <seealso cref="T:QModManager.API.SMLHelper.Assets.ModPrefab"/>
        </member>
        <member name="T:QModManager.API.SMLHelper.Assets.Spawnable.PatchEvent">
            <summary>
            A simple delegate type that takes no parameters and returns void.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.Spawnable.AssetsFolder">
            <summary>
            Override with the folder where your mod's icons and other assets are stored.
            Normally, this will be something like "MyModAssembly/Assets".
            </summary>
            <example>"MyModAssembly/Assets"</example>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.Spawnable.IconFileName">
            <summary>
            Override with the file name for this item's icon.
            If not overriden, this defaults to "[this item's ClassID].png".
            </summary>
            <example>"MyClassID.png"</example>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.Spawnable.FriendlyName">
            <summary>
            The in-game name of this spawnable item.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.Spawnable.Description">
            <summary>
            The description text when viewing this spawnable item from the inventory or crafting UI.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Assets.Spawnable.IsPatched">
            <summary>
            Returns <c>true</c> if this spawnable item has already been patched; Otherwise <c>false</c>.
            This will become <c>true</c> after the <seealso cref="M:QModManager.API.SMLHelper.Assets.Spawnable.Patch"/> method has finished running.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.Spawnable.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:QModManager.API.SMLHelper.Assets.Spawnable"/>, the basic class needed for any item that can be spawned into the Subnautica game world.
            </summary>
            <param name="classId">The main internal identifier for this item. Your item's <see cref="T:TechType"/> will be created using this name.</param>
            <param name="friendlyName">The name displayed in-game for this item whether in the open world or in the inventory.</param>
            <param name="description">The description for this item; Typically seen in the PDA, inventory, or crafting screens.</param>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.Spawnable.OnStartedPatching">
            <summary>
            This event triggers <c>before</c> the core patching methods begins.
            You can attach simple <seealso cref="T:QModManager.API.SMLHelper.Assets.Spawnable.PatchEvent"/> methods to this event if you want to run code <c>before</c> the any of the core patching methods begin.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.Spawnable.CorePatchEvents">
            <summary>
            The main patching methods are executed here.
            This event should only be used by the SMLHelper QuickStart classes.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Assets.Spawnable.OnFinishedPatching">
            <summary>
            This event triggers <c>after</c> the core patching methods begins.
            You can attach simple <seealso cref="T:QModManager.API.SMLHelper.Assets.Spawnable.PatchEvent"/> methods to this event if you want to run code <c>after</c> the core patching methods have finished.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Assets.Spawnable.Patch">
            <summary>
            Starts all patching code in SMLHelper.
            If <seealso cref="P:QModManager.API.SMLHelper.Assets.Spawnable.IsPatched"/> is <c>true</c> then this method is skipped to avoid duplicate patching.
            </summary>
            <seealso cref="F:QModManager.API.SMLHelper.Assets.Spawnable.OnStartedPatching"/>
            <seealso cref="F:QModManager.API.SMLHelper.Assets.Spawnable.OnFinishedPatching"/>
        </member>
        <member name="F:QModManager.API.SMLHelper.Patchers.ItemActionPatcher.CustomMiddleClickItemAction">
            <summary>
            A constant <see cref="T:ItemAction"/> value to represent a custom middle click item action
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Patchers.ItemActionPatcher.CustomLeftClickItemAction">
            <summary>
            A constant <see cref="T:ItemAction"/> value to represent a custom left click item action
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Patchers.TooltipPatcher.ExtraItemInfoOption">
            <summary>
            Should be one of: '<see langword="Mod name (default)">'</see>, '<see langword="Mod name and item ID"></see>', or '<see langword="Nothing"></see>'
            </summary>
        </member>
        <member name="T:QModManager.API.SMLHelper.Patchers.SelfCheckingDictionary`2">
            <summary>
            This dictionary strtucture automatically checks for duplicate keys as they are being added to the collection.
            Duplicate entires are logged and removed from the final collection.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:QModManager.API.SMLHelper.Patchers.SelfCheckingDictionary`2.DuplicatesDiscarded">
            <summary>
            Maintains a collection of the keys that have encountered duplicates and how many of them were discarded.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Patchers.SelfCheckingDictionary`2.UniqueEntries">
            <summary>
            Maintains the final collection of only unique keys.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Patchers.SelfCheckingDictionary`2.Item(`0)">
            <summary>
            Gets a key value pair from the collection or sets a key value pair into the collection.
            When setting, if a key already exists, the previous entry will be discarded.
            </summary>
            <param name="key">The unique key.</param>
            <returns>The value corresponding to the key.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Patchers.SelfCheckingDictionary`2.Add(`0,`1)">
            <summary>
            Add a new entry the collection.
            If a duplicate key is found, all entries with that key will be excluded from the final collection.
            </summary>
            <param name="key">The unique key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Patchers.SelfCheckingDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add a new entry the collection.
            If a duplicate key is found, all entries with that key will be excluded from the final collection.
            </summary>
            <param name="item">The key value pair.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Patchers.SelfCheckingDictionary`2.DupFoundAllDiscardedLog(`0)">
            <summary>
            Informs the user that all entries for the specified key have been discarded.
            </summary>
            <param name="key">The no longer unique key.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Patchers.SelfCheckingDictionary`2.DupFoundLastDiscardedLog(`0)">
            <summary>
            Informs the user that the previous entry for the specified key has been discarded.
            </summary>
            <param name="key">The no longer unique key.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.CustomFishHandler">
            <summary>
            Class to manage registering of fish into the game
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.CustomFishHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Handlers.CustomFishHandler.fishTechTypes">
            <summary>
            A list of all the custom fish that have so far been registered into the game. This includes ones from mods that may have been loaded earlier.
            It is mainly used by CustomFishPatcher to spawn fish in
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CustomFishHandler.QModManager#API#SMLHelper#Interfaces#ICustomFishHandler#RegisterFish(QModManager.API.SMLHelper.Assets.CustomFish)">
            <summary>
            Registers a CustomFish object into the game
            </summary>
            <param name="fish">The CustomFish that you are registering</param>
            <returns>The TechType created using the info from your CustomFish object</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CustomFishHandler.RegisterFish(QModManager.API.SMLHelper.Assets.CustomFish)">
            <summary>
            Registers a CustomFish object into the game
            </summary>
            <param name="fish">The CustomFish that you are registering</param>
            <returns>The TechType created using the info from your CustomFish object</returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.ItemActionHandler">
            <summary>
            A handler class for registering your custom middle click actions for items
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.ItemActionHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.ItemActionHandler.QModManager#API#SMLHelper#Interfaces#IItemActionHandler#RegisterLeftClickAction(TechType,System.Action{InventoryItem},System.String,System.Predicate{InventoryItem})">
            <summary>
            Registers a custom left click action for a <see cref="T:TechType"/>
            </summary>
            <param name="targetTechType">The <see cref="T:TechType"/> to which the left click action will be assigned</param>
            <param name="callback">The method which will be called when a matching <see cref="T:InventoryItem"/> with the specified <see cref="T:TechType"/> was left-clicked</param>
            <param name="tooltip">The secondary tooltip which will appear in the description of the item</param>
            <param name="condition">The condition which must return <see langword="true"/> for the action to be called when the item is clicked<para/>If ommited, the action will always be called</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.ItemActionHandler.QModManager#API#SMLHelper#Interfaces#IItemActionHandler#RegisterMiddleClickAction(TechType,System.Action{InventoryItem},System.String,System.Predicate{InventoryItem})">
            <summary>
            Registers a custom middle click action for a <see cref="T:TechType"/>
            </summary>
            <param name="targetTechType">The <see cref="T:TechType"/> which the middle click action will be assigned</param>
            <param name="callback">The method which will be called when a matching <see cref="T:InventoryItem"/> with the specified <see cref="T:TechType"/> was middle-clicked</param>
            <param name="tooltip">The secondary tooltip which will appear in the description of the item</param>
            <param name="condition">The condition which must return <see langword="true"/> for the action to be called when the item is clicked<para/>If ommited, the action will always be called</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.ItemActionHandler.RegisterLeftClickAction(TechType,System.Action{InventoryItem},System.String,System.Predicate{InventoryItem})">
            <summary>
            Registers a custom left click action for a <see cref="T:TechType"/>
            </summary>
            <param name="targetTechType">The <see cref="T:TechType"/> to which the left click action will be assigned</param>
            <param name="callback">The method which will be called when a matching <see cref="T:InventoryItem"/> with the specified <see cref="T:TechType"/> was left-clicked</param>
            <param name="tooltip">The secondary tooltip which will appear in the description of the item</param>
            <param name="condition">The condition which must return <see langword="true"/> for the action to be called when the item is clicked<para/>If ommited, the action will always be called</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.ItemActionHandler.RegisterMiddleClickAction(TechType,System.Action{InventoryItem},System.String,System.Predicate{InventoryItem})">
            <summary>
            Registers a custom middle click action for a <see cref="T:TechType"/>
            </summary>
            <param name="targetTechType">The <see cref="T:TechType"/> which the middle click action will be assigned</param>
            <param name="callback">The method which will be called when a matching <see cref="T:InventoryItem"/> with the specified <see cref="T:TechType"/> was middle-clicked</param>
            <param name="tooltip">The secondary tooltip which will appear in the description of the item</param>
            <param name="condition">The condition which must return <see langword="true"/> for the action to be called when the item is clicked<para/>If ommited, the action will always be called</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.LanguageHandler">
            <summary>
            A handler class for managing language lines
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.LanguageHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.LanguageHandler.SetLanguageLine(System.String,System.String)">
            <summary>
            Allows you to define a language entry into the game.
            </summary>
            <param name="lineId">The ID of the entry, this is what is used to get the actual text.</param>
            <param name="text">The actual text related to the entry.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.LanguageHandler.SetTechTypeName(TechType,System.String)">
            <summary>
            Allows you to set the display name of a specific <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The <see cref="T:TechType"/> whose display name that is to be changed.</param>
            <param name="text">The new display name for the chosen <see cref="T:TechType"/>.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.LanguageHandler.SetTechTypeTooltip(TechType,System.String)">
            <summary>
            Allows you to set the tooltip of a specific <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The <see cref="T:TechType"/> whose tooltip that is to be changed.</param>
            <param name="text">The new tooltip for the chosen <see cref="T:TechType"/>.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.LanguageHandler.QModManager#API#SMLHelper#Interfaces#ILanguageHandler#SetLanguageLine(System.String,System.String)">
            <summary>
            Allows you to define a language entry into the game.
            </summary>
            <param name="lineId">The ID of the entry, this is what is used to get the actual text.</param>
            <param name="text">The actual text related to the entry.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.LanguageHandler.QModManager#API#SMLHelper#Interfaces#ILanguageHandler#SetTechTypeName(TechType,System.String)">
            <summary>
            Allows you to set the display name of a specific <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The <see cref="T:TechType"/> whose display name that is to be changed.</param>
            <param name="text">The new display name for the chosen <see cref="T:TechType"/>.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.LanguageHandler.QModManager#API#SMLHelper#Interfaces#ILanguageHandler#SetTechTypeTooltip(TechType,System.String)">
            <summary>
            Allows you to set the tooltip of a specific <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The <see cref="T:TechType"/> whose tooltip that is to be changed.</param>
            <param name="text">The new tooltip for the chosen <see cref="T:TechType"/>.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.OptionsPanelHandler">
            <summary>
            A handler class for registering your custom in-game mod options.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.OptionsPanelHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.OptionsPanelHandler.RegisterModOptions(QModManager.API.SMLHelper.Options.ModOptions)">
            <summary>
            Registers your mod options to the in-game menu.
            </summary>
            <param name="options">The mod options. Create a new child class inheriting from this one and add your options to it.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Options.ModOptions"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.OptionsPanelHandler.QModManager#API#SMLHelper#Interfaces#IOptionsPanelHandler#RegisterModOptions(QModManager.API.SMLHelper.Options.ModOptions)">
            <summary>
            Registers your mod options to the in-game menu.
            </summary>
            <param name="options">The mod options. Create a new child class inheriting from this one and add your options to it.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Options.ModOptions"/>
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.PDAHandler">
            <summary>
            A handler class for various scanner related data.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.PDAHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.PDAHandler.QModManager#API#SMLHelper#Interfaces#IPDAHandler#EditFragmentsToScan(TechType,System.Int32)">
            <summary>
            Edits how many fragments must be scanned before unlocking the techtype's blueprint.
            </summary>
            <param name="techType">Can be either techtype of the fragment or the crafted item.</param>
            <param name="fragmentCount">The number of fragments to scan.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.PDAHandler.QModManager#API#SMLHelper#Interfaces#IPDAHandler#EditFragmentScanTime(TechType,System.Single)">
            <summary>
            Edits the time it takes to finish scanning a fragment.
            </summary>
            <param name="techType">Can be either techtype of the fragment or the crafted item.</param>
            <param name="scanTime">The relative time spent on scanning. Default value is 1.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.PDAHandler.EditFragmentsToScan(TechType,System.Int32)">
            <summary>
            Edits how many fragments must be scanned before unlocking the techtype's blueprint.
            </summary>
            <param name="techType">Can be either techtype of the fragment or the crafted item.</param>
            <param name="fragmentCount">The number of fragments to scan.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.PDAHandler.EditFragmentScanTime(TechType,System.Single)">
            <summary>
            Edits the time it takes to finish scanning a fragment.
            </summary>
            <param name="techType">Can be either techtype of the fragment or the crafted item.</param>
            <param name="scanTime">The relative time spent on scanning. Default value is 1.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.BioReactorHandler">
            <summary>
            A handler class for managing Bio Reactor fuels
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.BioReactorHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.BioReactorHandler.QModManager#API#SMLHelper#Interfaces#IBioReactorHandler#SetBioReactorCharge(TechType,System.Single)">
            <summary>
            <para>Allows you to specify the quantity of energy that a TechType will produce with bio reactors.</para>
            </summary>
            <param name="techType">The TechType that you want to use with bioreactors.</param>
            <param name="charge">The quantity of energy that will be produced by this TechType.</param>
            <seealso cref="T:CraftData.BackgroundType"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.BioReactorHandler.SetBioReactorCharge(TechType,System.Single)">
            <summary>
            <para>Allows you to specify the quantity of energy that a TechType will produce with bio reactors.</para>
            </summary>
            <param name="techType">The TechType that you want to use with bioreactors.</param>
            <param name="charge">The quantity of energy that will be produced by this TechType.</param>
            <seealso cref="T:CraftData.BackgroundType"/>
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.CraftDataHandler">
            <summary>
            A handler class for adding and editing crafted items.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.CraftDataHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetTechData(TechType,ITechData)">
            <summary>
            <para>Allows you to edit recipes, i.e. TechData for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose TechData you want to edit.</param>
            <param name="techData">The TechData for that TechType.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.TechData"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetTechData(TechType,QModManager.API.SMLHelper.Crafting.TechData)">
            <summary>
            <para>Allows you to edit recipes, i.e. TechData for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose TechData you want to edit.</param>
            <param name="techData">The TechData for that TechType.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.TechData"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetEquipmentType(TechType,EquipmentType)">
            <summary>
            <para>Allows you to edit EquipmentTypes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose EqiupmentType you want to edit.</param>
            <param name="equipmentType">The EquipmentType for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetQuickSlotType(TechType,QuickSlotType)">
            <summary>
            <para>Allows you to edit QuickSlotType for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose QuickSlotType you want to edit.</param>
            <param name="slotType">The QuickSlotType for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetHarvestOutput(TechType,TechType)">
            <summary>
            <para>Allows you to edit harvest output, i.e. what TechType you get when you "harvest" a TechType.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose harvest output you want to edit.</param>
            <param name="harvestOutput">The harvest output for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetHarvestType(TechType,HarvestType)">
            <summary>
            <para>Allows you to edit how TechTypes are harvested.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose HarvestType you want to edit.</param>
            <param name="harvestType">The HarvestType for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetHarvestFinalCutBonus(TechType,System.Int32)">
            <summary>
            <para>Allows you to edit how much additional slices/seeds are given upon last knife hit.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose final cut bonus you want to edit.</param>
            <param name="bonus">The number of additional slices/seeds you'll receive on last cut.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetItemSize(TechType,Vector2int)">
            <summary>
            <para>Allows you to edit item sizes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose item size you want to edit.</param>
            <param name="size">The item size for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetItemSize(TechType,System.Int32,System.Int32)">
            <summary>
            <para>Allows you to edit item sizes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose item size you want to edit.</param>
            <param name="x">The width of the item</param>
            <param name="y">The height of the item</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetCraftingTime(TechType,System.Single)">
            <summary>
            <para>Allows you to edit crafting times for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose crafting time you want to edit.</param>
            <param name="time">The crafting time, in seconds, for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetCookedVariant(TechType,TechType)">
            <summary>
            <para>Allows you to edit the cooked creature list, i.e. associate the unedible TechType to the cooked TechType.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="uncooked">The TechType whose cooked creature counterpart to edit.</param>
            <param name="cooked">The cooked creature counterpart for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.SetBackgroundType(TechType,CraftData.BackgroundType)">
            <summary>
            <para>Allows you to edit inventory background colors for TechTypes.</para>
            </summary>
            <param name="techType">The TechType whose BackgroundType you want to edit.</param>
            <param name="backgroundColor">The background color for that TechType.</param>
            <seealso cref="T:CraftData.BackgroundType"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.AddBuildable(TechType)">
            <summary>
            Allows you to add items to the buildable list.
            </summary>
            <param name="techType">The TechType which you want to add to the buildable list.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.AddToGroup(TechGroup,TechCategory,TechType)">
            <summary>
            Allows you to add items to the game's internal grouping system.
            Required if you want to make buildable items show up in the Habitat Builder.
            </summary>
            <param name="group">The TechGroup you want to add your TechType to.</param>
            <param name="category">The TechCategory (in the TechGroup) you want to add your TechType to.</param>
            <param name="techType">The TechType you want to add.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.AddToGroup(TechGroup,TechCategory,TechType,TechType)">
            <summary>
            Allows you to add items to the game's internal grouping system.
            Required if you want to make buildable items show up in the Habitat Builder.
            </summary>
            <param name="group">The TechGroup you want to add your TechType to.</param>
            <param name="category">The TechCategory (in the TechGroup) you want to add your TechType to.</param>
            <param name="techType">The TechType you want to add.</param>
            <param name="after">Added TechType will be added after this TechType, for sorting purposes.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.RemoveFromGroup(TechGroup,TechCategory,TechType)">
            <summary>
            Allows you to remove an existing TechType from the game's internal group system.
            </summary>
            <param name="group">The TechGroup in which the TechType is located.</param>
            <param name="category">The TechCategory in which the TechType is located.</param>
            <param name="techType">The TechType which you want to remove.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.GetModdedTechData(TechType)">
            <summary>
            Safely accesses the crafting data from a modded item.<para/>
            WARNING: This method is highly dependent on mod load order. 
            Make sure your mod is loading after the mod whose TechData you are trying to access.
            </summary>
            <param name="techType">The TechType whose TechData you want to access.</param>
            <returns>The ITechData from the modded item if it exists; Otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetTechData(TechType,ITechData)">
            <summary>
            <para>Allows you to edit recipes, i.e. TechData for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose TechData you want to edit.</param>
            <param name="techData">The TechData for that TechType.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.TechData"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetTechData(TechType,QModManager.API.SMLHelper.Crafting.TechData)">
            <summary>
            <para>Allows you to edit recipes, i.e. TechData for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose TechData you want to edit.</param>
            <param name="techData">The TechData for that TechType.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.TechData"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetEquipmentType(TechType,EquipmentType)">
            <summary>
            <para>Allows you to edit EquipmentTypes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose EqiupmentType you want to edit.</param>
            <param name="equipmentType">The EquipmentType for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetQuickSlotType(TechType,QuickSlotType)">
            <summary>
            <para>Allows you to edit QuickSlotType for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose QuickSlotType you want to edit.</param>
            <param name="slotType">The QuickSlotType for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetHarvestOutput(TechType,TechType)">
            <summary>
            <para>Allows you to edit harvest output, i.e. what TechType you get when you "harvest" a TechType.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose harvest output you want to edit.</param>
            <param name="harvestOutput">The harvest output for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetHarvestType(TechType,HarvestType)">
            <summary>
            <para>Allows you to edit how TechTypes are harvested.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose HarvestType you want to edit.</param>
            <param name="harvestType">The HarvestType for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetHarvestFinalCutBonus(TechType,System.Int32)">
            <summary>
            <para>Allows you to edit how much additional slices/seeds are given upon last knife hit.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose final cut bonus you want to edit.</param>
            <param name="bonus">The number of additional slices/seeds you'll receive on last cut.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetItemSize(TechType,Vector2int)">
            <summary>
            <para>Allows you to edit item sizes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose item size you want to edit.</param>
            <param name="size">The item size for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetItemSize(TechType,System.Int32,System.Int32)">
            <summary>
            <para>Allows you to edit item sizes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose item size you want to edit.</param>
            <param name="x">The width of the item</param>
            <param name="y">The height of the item</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetCraftingTime(TechType,System.Single)">
            <summary>
            <para>Allows you to edit crafting times for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose crafting time you want to edit.</param>
            <param name="time">The crafting time, in seconds, for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetCookedVariant(TechType,TechType)">
            <summary>
            <para>Allows you to edit the cooked creature list, i.e. associate the unedible TechType to the cooked TechType.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="uncooked">The TechType whose cooked creature counterpart to edit.</param>
            <param name="cooked">The cooked creature counterpart for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#SetBackgroundType(TechType,CraftData.BackgroundType)">
            <summary>
            <para>Allows you to edit inventory background colors for TechTypes.</para>
            </summary>
            <param name="techType">The TechType whose BackgroundType you want to edit.</param>
            <param name="backgroundColor">The background color for that TechType.</param>
            <seealso cref="T:CraftData.BackgroundType"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#AddBuildable(TechType)">
            <summary>
            Allows you to add items to the buildable list.
            </summary>
            <param name="techType">The TechType which you want to add to the buildable list.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#AddToGroup(TechGroup,TechCategory,TechType)">
            <summary>
            Allows you to add items to the game's internal grouping system.
            Required if you want to make buildable items show up in the Habitat Builder.
            </summary>
            <param name="group">The TechGroup you want to add your TechType to.</param>
            <param name="category">The TechCategory (in the TechGroup) you want to add your TechType to.</param>
            <param name="techType">The TechType you want to add.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#AddToGroup(TechGroup,TechCategory,TechType,TechType)">
            <summary>
            Allows you to add items to the game's internal grouping system.
            Required if you want to make buildable items show up in the Habitat Builder.
            </summary>
            <param name="group">The TechGroup you want to add your TechType to.</param>
            <param name="category">The TechCategory (in the TechGroup) you want to add your TechType to.</param>
            <param name="techType">The TechType you want to add.</param>
            <param name="after">Added TechType will be added after this TechType, for sorting purposes.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#RemoveFromGroup(TechGroup,TechCategory,TechType)">
            <summary>
            Allows you to remove an existing TechType from the game's internal group system.
            </summary>
            <param name="group">The TechGroup in which the TechType is located.</param>
            <param name="category">The TechCategory in which the TechType is located.</param>
            <param name="techType">The TechType which you want to remove.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftDataHandler.QModManager#API#SMLHelper#Interfaces#ICraftDataHandler#GetModdedTechData(TechType)">
            <summary>
            Safely accesses the crafting data from a modded item.<para/>
            WARNING: This method is highly dependent on mod load order. 
            Make sure your mod is loading after the mod whose TechData you are trying to access.
            </summary>
            <param name="techType">The TechType whose TechData you want to access.</param>
            <returns>The ITechData from the modded item if it exists; Otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.CraftTreeHandler">
            <summary>
            A handler class for creating and editing of crafting trees.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.CreateCustomCraftTreeAndType(System.String,CraftTree.Type@)">
            <summary>
            <para>Your first method call to start a new custom crafting tree.</para>
            <para>Creating a new CraftTree only makes sense if you're going to use it in a new type of <see cref="T:GhostCrafter"/>.</para>
            </summary>
            <param name="name">The name for the new <see cref="T:CraftTree.Type" /> enum.</param>
            <param name="craftTreeType">The new enum instance for your custom craft tree type.</param>
            <returns>
            <para>Returns the root node for your custom craft tree, as a new <see cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeRoot"/> instance.</para>
            <para>Build up your custom crafting tree from this root node.</para>
            <para>This tree will be automatically patched into the game. No further calls into <see cref="T:QModManager.API.SMLHelper.Handlers.CraftTreeHandler"/> required.</para>
            </returns>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode"/>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode"/>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeTab"/>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeCraft"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.ModdedCraftTreeTypeExists(System.String)">
            <summary>
            Safely looks for a modded CraftTree Type from another mod in the SMLHelper CraftTreeTypeCache.
            </summary>
            <param name="craftTreeString">The string used to define the modded item's new techtype.</param>
            <returns>
              <c>True</c> if the craft tree was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.AddCraftingNode(CraftTree.Type,TechType,System.String[])">
            <summary>
            Adds a new crafting node to the root of the specified crafting tree, at the provided tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="craftingItem">The item to craft.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.AddCraftingNode(CraftTree.Type,TechType)">
            <summary>
            Adds a new crafting node to the root of the specified crafting tree
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="craftingItem">The item to craft.</param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,Atlas.Sprite)">
            <summary>
            Adds a new tab node to the root of the specified crafting tree.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Adds a new tab node to the root of the specified crafting tree.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,Atlas.Sprite,System.String[])">
            <summary>
            Adds a new tab node to the root of the specified crafting tree, at the specified tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,UnityEngine.Sprite,System.String[])">
            <summary>
            Adds a new tab node to the root of the specified crafting tree, at the specified tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.RemoveNode(CraftTree.Type,System.String[])">
            <summary>
            <para>Removes a node at the specified node location. Can be used to remove either tabs or craft nodes.</para>
            <para>If a tab node is selected, all child nodes to it will also be removed.</para>
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="stepsToNode">
            <para>The steps to the target node.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>This means matching the id of the crafted item or the id of the tab name.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.QModManager#API#SMLHelper#Interfaces#ICraftTreeHandler#CreateCustomCraftTreeAndType(System.String,CraftTree.Type@)">
            <summary>
            <para>Your first method call to start a new custom crafting tree.</para>
            <para>Creating a new CraftTree only makes sense if you're going to use it in a new type of <see cref="T:GhostCrafter"/>.</para>
            </summary>
            <param name="name">The name for the new <see cref="T:CraftTree.Type" /> enum.</param>
            <param name="craftTreeType">The new enum instance for your custom craft tree type.</param>
            <returns>
            <para>Returns the root node for your custom craft tree, as a new <see cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeRoot"/> instance.</para>
            <para>Build up your custom crafting tree from this root node.</para>
            <para>This tree will be automatically patched into the game. No further calls into <see cref="T:QModManager.API.SMLHelper.Handlers.CraftTreeHandler"/> required.</para>
            </returns>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode"/>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode"/>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeTab"/>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeCraft"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.QModManager#API#SMLHelper#Interfaces#ICraftTreeHandler#ModdedCraftTreeTypeExists(System.String)">
            <summary>
            Safely looks for a modded CraftTree Type from another mod in the SMLHelper CraftTreeTypeCache.
            </summary>
            <param name="craftTreeString">The string used to define the modded item's new techtype.</param>
            <returns>
              <c>True</c> if the craft tree was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.QModManager#API#SMLHelper#Interfaces#ICraftTreeHandler#AddCraftingNode(CraftTree.Type,TechType,System.String[])">
            <summary>
            Adds a new crafting node to the root of the specified crafting tree, at the provided tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="craftingItem">The item to craft.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.QModManager#API#SMLHelper#Interfaces#ICraftTreeHandler#AddCraftingNode(CraftTree.Type,TechType)">
            <summary>
            Adds a new crafting node to the root of the specified crafting tree
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="craftingItem">The item to craft.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.QModManager#API#SMLHelper#Interfaces#ICraftTreeHandler#AddTabNode(CraftTree.Type,System.String,System.String,Atlas.Sprite)">
            <summary>
            Adds a new tab node to the root of the specified crafting tree.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.QModManager#API#SMLHelper#Interfaces#ICraftTreeHandler#AddTabNode(CraftTree.Type,System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Adds a new tab node to the root of the specified crafting tree.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.QModManager#API#SMLHelper#Interfaces#ICraftTreeHandler#AddTabNode(CraftTree.Type,System.String,System.String,Atlas.Sprite,System.String[])">
            <summary>
            Adds a new tab node to the root of the specified crafting tree, at the specified tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.QModManager#API#SMLHelper#Interfaces#ICraftTreeHandler#AddTabNode(CraftTree.Type,System.String,System.String,UnityEngine.Sprite,System.String[])">
            <summary>
            Adds a new tab node to the root of the specified crafting tree, at the specified tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.CraftTreeHandler.QModManager#API#SMLHelper#Interfaces#ICraftTreeHandler#RemoveNode(CraftTree.Type,System.String[])">
            <summary>
            <para>Removes a node at the specified node location. Can be used to remove either tabs or craft nodes.</para>
            <para>If a tab node is selected, all child nodes to it will also be removed.</para>
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="stepsToNode">
            <para>The steps to the target node.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>This means matching the id of the crafted item or the id of the tab name.</para>
            <para>Do not include "root" in this path.</para>
            </param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.KnownTechHandler">
            <summary>
            A handler class for configuring custom unlocking conditions for item blueprints.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.KnownTechHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.KnownTechHandler.UnlockOnStart(TechType)">
            <summary>
            Allows you to unlock a TechType on game start.
            </summary>
            <param name="techType"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.KnownTechHandler.QModManager#API#SMLHelper#Interfaces#IKnownTechHandler#UnlockOnStart(TechType)">
            <summary>
            Allows you to unlock a TechType on game start.
            </summary>
            <param name="techType"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String,FMODAsset,UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockMessage">The message that shows up on the right when the blueprint is unlocked. </param>
            <param name="UnlockSound">The sound that plays when you unlock the blueprint.</param>
            <param name="UnlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.KnownTechHandler.QModManager#API#SMLHelper#Interfaces#IKnownTechHandler#SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType})">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.KnownTechHandler.QModManager#API#SMLHelper#Interfaces#IKnownTechHandler#SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockMessage">The message that shows up on the right when the blueprint is unlocked. </param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.KnownTechHandler.QModManager#API#SMLHelper#Interfaces#IKnownTechHandler#SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},FMODAsset)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockSound">The sound that plays when you unlock the blueprint.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.KnownTechHandler.QModManager#API#SMLHelper#Interfaces#IKnownTechHandler#SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.KnownTechHandler.QModManager#API#SMLHelper#Interfaces#IKnownTechHandler#SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String,FMODAsset)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockMessage">The message that shows up on the right when the blueprint is unlocked. </param>
            <param name="UnlockSound">The sound that plays when you unlock the blueprint.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.KnownTechHandler.QModManager#API#SMLHelper#Interfaces#IKnownTechHandler#SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String,UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockMessage">The message that shows up on the right when the blueprint is unlocked. </param>
            <param name="UnlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.KnownTechHandler.QModManager#API#SMLHelper#Interfaces#IKnownTechHandler#SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},FMODAsset,UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockSound">The sound that plays when you unlock the blueprint.</param>
            <param name="UnlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.PrefabHandler">
            <summary>
            A handler class adding custom prefabs into the game
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.PrefabHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.PrefabHandler.QModManager#API#SMLHelper#Interfaces#IPrefabHandler#RegisterPrefab(QModManager.API.SMLHelper.Assets.ModPrefab)">
            <summary>
            Registers a ModPrefab into the game.
            </summary>
            <param name="prefab">The mod prefab to register. Create a child class inheriting off this one and configure as needed.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Assets.ModPrefab"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.PrefabHandler.RegisterPrefab(QModManager.API.SMLHelper.Assets.ModPrefab)">
            <summary>
            Registers a ModPrefab into the game.
            </summary>
            <param name="prefab">The mod prefab to register. Create a child class inheriting off this one and configure as needed.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Assets.ModPrefab"/>
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.SpriteHandler">
            <summary>
            A handler class for adding custom sprites into the game.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.SpriteHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.RegisterSprite(TechType,Atlas.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,Atlas.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,UnityEngine.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group this sprite will be added to.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.RegisterSprite(TechType,UnityEngine.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.RegisterSprite(TechType,System.String)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="filePathToImage">The file path to image to be converted into a sprite.</param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.RegisterSprite(TechType,System.String,UnityEngine.TextureFormat)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="filePathToImage">The file path to image to be converted into a sprite.</param>
            <param name="format"><para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para></param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,System.String)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="filePathToImage">The file path to image.</param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,System.String,UnityEngine.TextureFormat)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="filePathToImage">The file path to image.</param>
            <param name="format"><para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para></param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.QModManager#API#SMLHelper#Interfaces#ISpriteHandler#RegisterSprite(TechType,Atlas.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.QModManager#API#SMLHelper#Interfaces#ISpriteHandler#RegisterSprite(SpriteManager.Group,System.String,Atlas.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.QModManager#API#SMLHelper#Interfaces#ISpriteHandler#RegisterSprite(SpriteManager.Group,System.String,UnityEngine.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group this sprite will be added to.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.QModManager#API#SMLHelper#Interfaces#ISpriteHandler#RegisterSprite(TechType,UnityEngine.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.QModManager#API#SMLHelper#Interfaces#ISpriteHandler#RegisterSprite(TechType,System.String)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="filePathToImage">The file path to image to be converted into a sprite.</param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.QModManager#API#SMLHelper#Interfaces#ISpriteHandler#RegisterSprite(TechType,System.String,UnityEngine.TextureFormat)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="filePathToImage">The file path to image to be converted into a sprite.</param>
            <param name="format"><para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para></param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.QModManager#API#SMLHelper#Interfaces#ISpriteHandler#RegisterSprite(SpriteManager.Group,System.String,System.String)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="filePathToImage">The file path to image.</param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.SpriteHandler.QModManager#API#SMLHelper#Interfaces#ISpriteHandler#RegisterSprite(SpriteManager.Group,System.String,System.String,UnityEngine.TextureFormat)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="filePathToImage">The file path to image.</param>
            <param name="format"><para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para></param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="T:QModManager.API.SMLHelper.Handlers.TechTypeHandler">
            <summary>
            A handler class for everything related to creating new TechTypes.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Handlers.TechTypeHandler.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.AddTechType(System.String,System.String,System.String)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game. This new techtype will be unlocked at the start of a the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.AddTechType(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <c>true</c>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.AddTechType(System.String,System.String,System.String,Atlas.Sprite)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite. This new techtype will be unlocked at the start of a the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.AddTechType(System.String,System.String,System.String,Atlas.Sprite,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <c>true</c>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.AddTechType(System.String,System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite. This new techtype will be unlocked at the start of a the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.AddTechType(System.String,System.String,System.String,UnityEngine.Sprite,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <c>true</c>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.TryGetModdedTechType(System.String,TechType@)">
            <summary>
            Safely looks for a modded item from another mod in the SMLHelper TechTypeCache and outputs its <see cref="T:TechType" /> value when found.
            </summary>
            <param name="techtypeString">The string used to define the modded item's new techtype.</param>
            <param name="modTechType">The TechType enum value of the modded. Defaults to <see cref="F:TechType.None" /> when the item was not found.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.ModdedTechTypeExists(System.String)">
            <summary>
            Safely looks for a modded item from another mod in the SMLHelper TechTypeCache.
            </summary>
            <param name="techtypeString">The string used to define the modded item's new techtype.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.QModManager#API#SMLHelper#Interfaces#ITechTypeHandler#AddTechType(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <c>true</c>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.QModManager#API#SMLHelper#Interfaces#ITechTypeHandler#AddTechType(System.String,System.String,System.String)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game. This new techtype will be unlocked at the start of a the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.QModManager#API#SMLHelper#Interfaces#ITechTypeHandler#AddTechType(System.String,System.String,System.String,Atlas.Sprite,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <c>true</c>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.QModManager#API#SMLHelper#Interfaces#ITechTypeHandler#AddTechType(System.String,System.String,System.String,Atlas.Sprite)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite. This new techtype will be unlocked at the start of a the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.QModManager#API#SMLHelper#Interfaces#ITechTypeHandler#AddTechType(System.String,System.String,System.String,UnityEngine.Sprite,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <c>true</c>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.QModManager#API#SMLHelper#Interfaces#ITechTypeHandler#AddTechType(System.String,System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite. This new techtype will be unlocked at the start of a the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.QModManager#API#SMLHelper#Interfaces#ITechTypeHandler#TryGetModdedTechType(System.String,TechType@)">
            <summary>
            Safely looks for a modded item from another mod in the SMLHelper TechTypeCache and outputs its <see cref="T:TechType" /> value when found.
            </summary>
            <param name="techtypeString">The string used to define the modded item's new techtype.</param>
            <param name="modTechType">The TechType enum value of the modded. Defaults to <see cref="F:TechType.None" /> when the item was not found.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="M:QModManager.API.SMLHelper.Handlers.TechTypeHandler.QModManager#API#SMLHelper#Interfaces#ITechTypeHandler#ModdedTechTypeExists(System.String)">
            <summary>
            Safely looks for a modded item from another mod in the SMLHelper TechTypeCache.
            </summary>
            <param name="techtypeString">The string used to define the modded item's new techtype.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.ICustomFishHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.CustomFishHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICustomFishHandler.RegisterFish(QModManager.API.SMLHelper.Assets.CustomFish)">
            <summary>
            Registers a CustomFish object into the game
            </summary>
            <param name="fish">The CustomFish that you are registering</param>
            <returns>The TechType created using the info from your CustomFish object</returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.IBioReactorHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.BioReactorHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IBioReactorHandler.SetBioReactorCharge(TechType,System.Single)">
            <summary>
            <para>Allows you to specify the quantity of energy that a TechType will produce with bio reactors.</para>
            </summary>
            <param name="techType">The TechType that you want to use with bioreactors.</param>
            <param name="charge">The quantity of energy that will be produced by this TechType.</param>
            <seealso cref="T:CraftData.BackgroundType"/>
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.CraftDataHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetTechData(TechType,ITechData)">
            <summary>
            <para>Allows you to edit recipes, i.e. TechData for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose TechData you want to edit.</param>
            <param name="techData">The TechData for that TechType.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.TechData"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetTechData(TechType,QModManager.API.SMLHelper.Crafting.TechData)">
            <summary>
            <para>Allows you to edit recipes, i.e. TechData for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose TechData you want to edit.</param>
            <param name="techData">The TechData for that TechType.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.TechData"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetEquipmentType(TechType,EquipmentType)">
            <summary>
            <para>Allows you to edit EquipmentTypes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose EqiupmentType you want to edit.</param>
            <param name="equipmentType">The EquipmentType for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetQuickSlotType(TechType,QuickSlotType)">
            <summary>
            <para>Allows you to edit QuickSlotType for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose QuickSlotType you want to edit.</param>
            <param name="slotType">The QuickSlotType for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetHarvestOutput(TechType,TechType)">
            <summary>
            <para>Allows you to edit harvest output, i.e. what TechType you get when you "harvest" a TechType.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose harvest output you want to edit.</param>
            <param name="harvestOutput">The harvest output for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetHarvestType(TechType,HarvestType)">
            <summary>
            <para>Allows you to edit how TechTypes are harvested.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose HarvestType you want to edit.</param>
            <param name="harvestType">The HarvestType for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetHarvestFinalCutBonus(TechType,System.Int32)">
            <summary>
            <para>Allows you to edit how much additional slices/seeds are given upon last knife hit.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose final cut bonus you want to edit.</param>
            <param name="bonus">The number of additional slices/seeds you'll receive on last cut.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetItemSize(TechType,Vector2int)">
            <summary>
            <para>Allows you to edit item sizes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose item size you want to edit.</param>
            <param name="size">The item size for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetItemSize(TechType,System.Int32,System.Int32)">
            <summary>
            <para>Allows you to edit item sizes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose item size you want to edit.</param>
            <param name="x">The width of the item</param>
            <param name="y">The height of the item</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetCraftingTime(TechType,System.Single)">
            <summary>
            <para>Allows you to edit crafting times for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose crafting time you want to edit.</param>
            <param name="time">The crafting time, in seconds, for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetCookedVariant(TechType,TechType)">
            <summary>
            <para>Allows you to edit the cooked creature list, i.e. associate the unedible TechType to the cooked TechType.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="uncooked">The TechType whose cooked creature counterpart to edit.</param>
            <param name="cooked">The cooked creature counterpart for that TechType.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.SetBackgroundType(TechType,CraftData.BackgroundType)">
            <summary>
            <para>Allows you to edit inventory background colors for TechTypes.</para>
            </summary>
            <param name="techType">The TechType whose BackgroundType you want to edit.</param>
            <param name="backgroundColor">The background color for that TechType.</param>
            <seealso cref="T:CraftData.BackgroundType"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.AddBuildable(TechType)">
            <summary>
            Allows you to add items to the buildable list.
            </summary>
            <param name="techType">The TechType which you want to add to the buildable list.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.AddToGroup(TechGroup,TechCategory,TechType)">
            <summary>
            Allows you to add items to the game's internal grouping system.
            Required if you want to make buildable items show up in the Habitat Builder.
            </summary>
            <param name="group">The TechGroup you want to add your TechType to.</param>
            <param name="category">The TechCategory (in the TechGroup) you want to add your TechType to.</param>
            <param name="techType">The TechType you want to add.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.AddToGroup(TechGroup,TechCategory,TechType,TechType)">
            <summary>
            Allows you to add items to the game's internal grouping system.
            Required if you want to make buildable items show up in the Habitat Builder.
            </summary>
            <param name="group">The TechGroup you want to add your TechType to.</param>
            <param name="category">The TechCategory (in the TechGroup) you want to add your TechType to.</param>
            <param name="techType">The TechType you want to add.</param>
            <param name="after">Added TechType will be added after this TechType, for sorting purposes.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.RemoveFromGroup(TechGroup,TechCategory,TechType)">
            <summary>
            Allows you to remove an existing TechType from the game's internal group system.
            </summary>
            <param name="group">The TechGroup in which the TechType is located.</param>
            <param name="category">The TechCategory in which the TechType is located.</param>
            <param name="techType">The TechType which you want to remove.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftDataHandler.GetModdedTechData(TechType)">
            <summary>
            Safely accesses the crafting data from a modded item.<para/>
            WARNING: This method is highly dependent on mod load order. 
            Make sure your mod is loading after the mod whose TechData you are trying to access.
            </summary>
            <param name="techType">The TechType whose TechData you want to access.</param>
            <returns>The ITechData from the modded item if it exists; Otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.ICraftTreeHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.CraftTreeHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftTreeHandler.CreateCustomCraftTreeAndType(System.String,CraftTree.Type@)">
            <summary>
            <para>Your first method call to start a new custom crafting tree.</para>
            <para>Creating a new CraftTree only makes sense if you're going to use it in a new type of <see cref="T:GhostCrafter"/>.</para>
            </summary>
            <param name="name">The name for the new <see cref="T:CraftTree.Type" /> enum.</param>
            <param name="craftTreeType">The new enum instance for your custom craft tree type.</param>
            <returns>
            <para>Returns the root node for your custom craft tree, as a new <see cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeRoot"/> instance.</para>
            <para>Build up your custom crafting tree from this root node.</para>
            <para>This tree will be automatically patched into the game. No further calls into <see cref="T:QModManager.API.SMLHelper.Interfaces.ICraftTreeHandler"/> required.</para>
            </returns>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeNode"/>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeLinkingNode"/>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeTab"/>
            <seealso cref="T:QModManager.API.SMLHelper.Crafting.ModCraftTreeCraft"/>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftTreeHandler.ModdedCraftTreeTypeExists(System.String)">
            <summary>
            Safely looks for a modded CraftTree Type from another mod in the SMLHelper CraftTreeTypeCache.
            </summary>
            <param name="craftTreeString">The string used to define the modded item's new techtype.</param>
            <returns>
              <c>True</c> if the craft tree was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftTreeHandler.AddCraftingNode(CraftTree.Type,TechType,System.String[])">
            <summary>
            Adds a new crafting node to the root of the specified crafting tree, at the provided tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="craftingItem">The item to craft.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftTreeHandler.AddCraftingNode(CraftTree.Type,TechType)">
            <summary>
            Adds a new crafting node to the root of the specified crafting tree
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="craftingItem">The item to craft.</param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,Atlas.Sprite)">
            <summary>
            Adds a new tab node to the root of the specified crafting tree.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Adds a new tab node to the root of the specified crafting tree.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,Atlas.Sprite,System.String[])">
            <summary>
            Adds a new tab node to the root of the specified crafting tree, at the specified tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,UnityEngine.Sprite,System.String[])">
            <summary>
            Adds a new tab node to the root of the specified crafting tree, at the specified tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ICraftTreeHandler.RemoveNode(CraftTree.Type,System.String[])">
            <summary>
            <para>Removes a node at the specified node location. Can be used to remove either tabs or craft nodes.</para>
            <para>If a tab node is selected, all child nodes to it will also be removed.</para>
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="stepsToNode">
            <para>The steps to the target node.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>This means matching the id of the crafted item or the id of the tab name.</para>
            <para>Do not include "root" in this path.</para>
            </param>        
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.IItemActionHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.ItemActionHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IItemActionHandler.RegisterLeftClickAction(TechType,System.Action{InventoryItem},System.String,System.Predicate{InventoryItem})">
            <summary>
            Registers a custom left click action for a <see cref="T:TechType"/>
            </summary>
            <param name="targetTechType">The <see cref="T:TechType"/> to which the left click action will be assigned</param>
            <param name="callback">The method which will be called when a matching <see cref="T:InventoryItem"/> with the specified <see cref="T:TechType"/> was left-clicked</param>
            <param name="tooltip">The secondary tooltip which will appear in the description of the item</param>
            <param name="condition">The condition which must return <see langword="true"/> for the action to be called when the item is clicked<para/>If ommited, the action will always be called</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IItemActionHandler.RegisterMiddleClickAction(TechType,System.Action{InventoryItem},System.String,System.Predicate{InventoryItem})">
            <summary>
            Registers a custom middle click action for a <see cref="T:TechType"/>
            </summary>
            <param name="targetTechType">The <see cref="T:TechType"/> which the middle click action will be assigned</param>
            <param name="callback">The method which will be called when a matching <see cref="T:InventoryItem"/> with the specified <see cref="T:TechType"/> was middle-clicked</param>
            <param name="tooltip">The secondary tooltip which will appear in the description of the item</param>
            <param name="condition">The condition which must return <see langword="true"/> for the action to be called when the item is clicked<para/>If ommited, the action will always be called</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.IKnownTechHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.KnownTechHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IKnownTechHandler.UnlockOnStart(TechType)">
            <summary>
            Allows you to unlock a TechType on game start.
            </summary>
            <param name="techType"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IKnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType})">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IKnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockMessage">The message that shows up on the right when the blueprint is unlocked. </param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IKnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},FMODAsset)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockSound">The sound that plays when you unlock the blueprint.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IKnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IKnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String,FMODAsset)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockMessage">The message that shows up on the right when the blueprint is unlocked. </param>
            <param name="UnlockSound">The sound that plays when you unlock the blueprint.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IKnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String,UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockMessage">The message that shows up on the right when the blueprint is unlocked. </param>
            <param name="UnlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IKnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},FMODAsset,UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="UnlockSound">The sound that plays when you unlock the blueprint.</param>
            <param name="UnlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.ILanguageHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.LanguageHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ILanguageHandler.SetLanguageLine(System.String,System.String)">
            <summary>
            Allows you to define a language entry into the game.
            </summary>
            <param name="lineId">The ID of the entry, this is what is used to get the actual text.</param>
            <param name="text">The actual text related to the entry.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ILanguageHandler.SetTechTypeName(TechType,System.String)">
            <summary>
            Allows you to set the display name of a specific <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The <see cref="T:TechType"/> whose display name that is to be changed.</param>
            <param name="text">The new display name for the chosen <see cref="T:TechType"/>.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ILanguageHandler.SetTechTypeTooltip(TechType,System.String)">
            <summary>
            Allows you to set the tooltip of a specific <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The <see cref="T:TechType"/> whose tooltip that is to be changed.</param>
            <param name="text">The new tooltip for the chosen <see cref="T:TechType"/>.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.IOptionsPanelHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.OptionsPanelHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IOptionsPanelHandler.RegisterModOptions(QModManager.API.SMLHelper.Options.ModOptions)">
            <summary>
            Registers your mod options to the in-game menu.
            </summary>
            <param name="options">The mod options. Create a new child class inheriting from this one and add your options to it.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Options.ModOptions"/>
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.IPDAHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.PDAHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IPDAHandler.EditFragmentsToScan(TechType,System.Int32)">
            <summary>
            Edits how many fragments must be scanned before unlocking the techtype's blueprint.
            </summary>
            <param name="techType">Can be either techtype of the fragment or the crafted item.</param>
            <param name="fragmentCount">The number of fragments to scan.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IPDAHandler.EditFragmentScanTime(TechType,System.Single)">
            <summary>
            Edits the time it takes to finish scanning a fragment.
            </summary>
            <param name="techType">Can be either techtype of the fragment or the crafted item.</param>
            <param name="scanTime">The relative time spent on scanning. Default value is 1.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.IPrefabHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.PrefabHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.IPrefabHandler.RegisterPrefab(QModManager.API.SMLHelper.Assets.ModPrefab)">
            <summary>
            Registers a ModPrefab into the game.
            </summary>
            <param name="prefab">The mod prefab to register. Create a child class inheriting off this one and configure as needed.</param>
            <seealso cref="T:QModManager.API.SMLHelper.Assets.ModPrefab"/>
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.ISpriteHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.SpriteHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ISpriteHandler.RegisterSprite(TechType,Atlas.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ISpriteHandler.RegisterSprite(SpriteManager.Group,System.String,Atlas.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ISpriteHandler.RegisterSprite(SpriteManager.Group,System.String,UnityEngine.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group this sprite will be added to.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ISpriteHandler.RegisterSprite(TechType,UnityEngine.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ISpriteHandler.RegisterSprite(TechType,System.String,UnityEngine.TextureFormat)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="filePathToImage">The file path to image to be converted into a sprite.</param>
            <param name="format"><para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para></param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ISpriteHandler.RegisterSprite(TechType,System.String)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="filePathToImage">The file path to image to be converted into a sprite.</param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ISpriteHandler.RegisterSprite(SpriteManager.Group,System.String,System.String,UnityEngine.TextureFormat)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="filePathToImage">The file path to image.</param>
            <param name="format"><para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para></param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ISpriteHandler.RegisterSprite(SpriteManager.Group,System.String,System.String)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="filePathToImage">The file path to image.</param>
            <seealso cref="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="T:QModManager.API.SMLHelper.Interfaces.ITechTypeHandler">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Handlers.TechTypeHandler"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ITechTypeHandler.AddTechType(System.String,System.String,System.String)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game. This new techtype will be unlocked at the start of a the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ITechTypeHandler.AddTechType(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <c>true</c>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ITechTypeHandler.AddTechType(System.String,System.String,System.String,Atlas.Sprite)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite. This new techtype will be unlocked at the start of a the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ITechTypeHandler.AddTechType(System.String,System.String,System.String,Atlas.Sprite,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <c>true</c>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ITechTypeHandler.AddTechType(System.String,System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite. This new techtype will be unlocked at the start of a the game.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ITechTypeHandler.AddTechType(System.String,System.String,System.String,UnityEngine.Sprite,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TechType"/> into the game, with a sprite.
            </summary>
            <param name="internalName">The internal name of the TechType. Should not contain special characters.</param>
            <param name="displayName">The display name of the TechType. Can be anything.</param>
            <param name="tooltip">The tooltip, displayed when hovered in an inventory. Can be anything.</param>
            <param name="sprite">The sprite that will related to this TechType.</param>
            <param name="unlockAtStart">Whether this TechType should be unlocked on game start, or not. By default, <c>true</c>.</param>
            <returns>The new <see cref="T:TechType"/> that is created.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ITechTypeHandler.TryGetModdedTechType(System.String,TechType@)">
            <summary>
            Safely looks for a modded item from another mod in the SMLHelper TechTypeCache and outputs its <see cref="T:TechType" /> value when found.
            </summary>
            <param name="techtypeString">The string used to define the modded item's new techtype.</param>
            <param name="modTechType">The TechType enum value of the modded. Defaults to <see cref="F:TechType.None" /> when the item was not found.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="M:QModManager.API.SMLHelper.Interfaces.ITechTypeHandler.ModdedTechTypeExists(System.String)">
            <summary>
            Safely looks for a modded item from another mod in the SMLHelper TechTypeCache.
            </summary>
            <param name="techtypeString">The string used to define the modded item's new techtype.</param>
            <returns>
              <c>True</c> if the item was found; Otherwise <c>false</c>.
            </returns>
            <remarks>
            There's no guarantee in which order SMLHelper dependent mods are loaded,
            so if two mods are added at the same time, it may take a second game load for both to be visible to each other.
            </remarks>
        </member>
        <member name="T:QModManager.API.SMLHelper.Utility.IItemStorageHelper">
            <summary>
            Interface for <see cref="T:QModManager.API.SMLHelper.Utility.ItemStorageHelper"/> <para/>
            Can be used for dependency injection
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.IItemStorageHelper.HasRoomForCached(ItemsContainer,System.Int32,System.Int32)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="width">The item width.</param>
            <param name="height">The item height.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.IItemStorageHelper.HasRoomForCached(ItemsContainer,Vector2int)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="itemSize">Size of the item.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.IItemStorageHelper.IsEmpty(ItemsContainer)">
            <summary>
            Determines whether the specified container is empty.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.IItemStorageHelper.IsFull(ItemsContainer)">
            <summary>
            Determines whether the specified container is full.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is full; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.IItemStorageHelper.GetTotalSlots(ItemsContainer)">
            <summary>
            Get the totals number of 1x1 slots in the container, as calculated by the container's width and height.
            </summary>
            <param name="container">The container.</param>
            <returns>The total number of slots in the container.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.IItemStorageHelper.GetStorageLabel(ItemsContainer)">
            <summary>
            Get the inernal label for the storage container.
            </summary>
            <param name="container">The container.</param>
            <returns>The label used and displayed in-game for the container.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.IItemStorageHelper.GetAllowedTechTypes(ItemsContainer)">
            <summary>
            Gets the set of techtypes allowed in this container. This set can be altered.
            If the set is null or empty, then all items can be added.
            </summary>
            <param name="container">The container to check.</param>
            <returns>The collection of techtypes allowed in the container.</returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra">
            <summary>
            Additional methods for <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetBool(System.String,System.Boolean)">
            <summary>
            Get a <see cref="T:System.Boolean"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.SetBool(System.String,System.Boolean)">
            <summary>
            Set a <see cref="T:System.Boolean"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetKeyCode(System.String,UnityEngine.KeyCode)">
            <summary>
            Get a <see cref="T:UnityEngine.KeyCode"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.SetKeyCode(System.String,UnityEngine.KeyCode)">
            <summary>
            Set a <see cref="T:UnityEngine.KeyCode"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetColor(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Color"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetColor(System.String,UnityEngine.Color)">
            <summary>
            Get a <see cref="T:UnityEngine.Color"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.SetColor(System.String,UnityEngine.Color)">
            <summary>
            Set a <see cref="T:UnityEngine.Color"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetVector2(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector2"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetVector2(System.String,UnityEngine.Vector2)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector2"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.SetVector2(System.String,UnityEngine.Vector2)">
            <summary>
            Set a <see cref="T:UnityEngine.Vector2"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetVector2int(System.String)">
            <summary>
            Get a <see cref="T:Vector2int"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetVector2int(System.String,Vector2int)">
            <summary>
            Get a <see cref="T:Vector2int"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.SetVector2int(System.String,Vector2int)">
            <summary>
            Set a <see cref="T:Vector2int"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetVector3(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector3"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetVector3(System.String,UnityEngine.Vector3)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector3"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.SetVector3(System.String,UnityEngine.Vector3)">
            <summary>
            Set a <see cref="T:UnityEngine.Vector3"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetVector4(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector4"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetVector4(System.String,UnityEngine.Vector4)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector4"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.SetVector4(System.String,UnityEngine.Vector4)">
            <summary>
            Set a <see cref="T:UnityEngine.Vector4"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetQuaternion(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Quaternion"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.GetQuaternion(System.String,UnityEngine.Quaternion)">
            <summary>
            Get a <see cref="T:UnityEngine.Quaternion"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PlayerPrefsExtra.SetQuaternion(System.String,UnityEngine.Quaternion)">
            <summary>
            Set a <see cref="T:UnityEngine.Quaternion"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Utility.ExtBannedIdManager">
            <summary>
            This class is tasked with checking external txt files for banned IDs that are not to be isssued when patching in new enum entries.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ExtBannedIdManager.GetBannedIdsFor(System.String,System.Collections.Generic.IList{System.Int32}[])">
            <summary>
            Gets the banned ids, reported by the external files, for the specified enum.
            </summary>
            <param name="enumName">Name of the enum.</param>
            <param name="combineWith">Any previously known banned IDs for this enum can be combined into the final list.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> of banned indexes not to be issued for new entries of the specified enum.</returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ExtBannedIdManager.GetBannedIdsFor(System.String)">
            <summary>
            Gets the banned ids, reported by the external files, for the specified enum.
            </summary>
            <param name="enumName">Name of the enum.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> of banned indexes not to be issued for new entries of the specified enum.</returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Utility.ImageUtils">
            <summary>
            Utilities for image files
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadTextureFromFile(System.String,UnityEngine.TextureFormat)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Texture2D" /> from an image file.
            </summary>
            <param name="filePathToImage">The path to the image file.</param>
            <param name="format">
            <para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para>
            </param>
            <returns>Will return a new <see cref="T:UnityEngine.Texture2D"/> instance if the file exists; Otherwise returns null.</returns>
            <remarks>
            Ripped from: https://github.com/RandyKnapp/SubnauticaModSystem/blob/master/SubnauticaModSystem/Common/Utility/ImageUtils.cs
            </remarks>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)">
            <summary>
            Creates a new <see cref="T:Atlas.Sprite" /> from an image file.
            </summary>
            <param name="filePathToImage">The path to the image file.</param>
            <param name="format">
            <para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para>
            </param>
            <returns>Will return a new <see cref="T:Atlas.Sprite"/> instance if the file exists; Otherwise returns null.</returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Utility.StorageHelperExtensions">
            <summary>
            Extension methods to provide static calls for <see cref="T:ItemsContainer"/> into <see cref="T:QModManager.API.SMLHelper.Utility.ItemStorageHelper"/> methods.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.StorageHelperExtensions.HasRoomCached(ItemsContainer,System.Int32,System.Int32)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="width">The item width.</param>
            <param name="height">The item height.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.StorageHelperExtensions.HasRoomCached(ItemsContainer,Vector2int)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="itemSize">Size of the item.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.StorageHelperExtensions.IsEmpty(ItemsContainer)">
            <summary>
            Determines whether the specified container is empty.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.StorageHelperExtensions.IsFull(ItemsContainer)">
            <summary>
            Determines whether the specified container is full.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is full; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.StorageHelperExtensions.GetTotalSlots(ItemsContainer)">
            <summary>
            The totals number of 1x1 slots in the container, as calculated by the container's width and height.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.StorageHelperExtensions.GetStorageLabel(ItemsContainer)">
            <summary>
            Get the inernal label for the storage container.
            </summary>
            <param name="container">The container.</param>
            <returns>
            The label used and displayed in-game for the container.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.StorageHelperExtensions.GetAllowedTechTypes(ItemsContainer)">
            <summary>
            Gets the set of techtypes allowed in this container. This set can be altered.
            If the set is null or empty, then all items can be added.
            </summary>
            <param name="container">The container to check.</param>
            <returns>
            The collection of techtypes allowed in the container.
            </returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Utility.ItemStorageHelper">
            <summary>
            A utility class that offers additional info about <see cref="T:ItemsContainer"/> instances.
            </summary>
            <seealso cref="T:QModManager.API.SMLHelper.Utility.IItemStorageHelper" />
        </member>
        <member name="P:QModManager.API.SMLHelper.Utility.ItemStorageHelper.Main">
            <summary>
            Main entry point for all calls to this handler.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.HasRoomCached(ItemsContainer,System.Int32,System.Int32)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="width">The item width.</param>
            <param name="height">The item height.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.HasRoomCached(ItemsContainer,Vector2int)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="itemSize">Size of the item.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.IsEmpty(ItemsContainer)">
            <summary>
            Determines whether the specified container is empty.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.IsFull(ItemsContainer)">
            <summary>
            Determines whether the specified container is full.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is full; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.GetTotalSlots(ItemsContainer)">
            <summary>
            The totals number of 1x1 slots in the container, as calculated by the container's width and height.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.GetStorageLabel(ItemsContainer)">
            <summary>
            Get the inernal label for the storage container.
            </summary>
            <param name="container">The container.</param>
            <returns>
            The label used and displayed in-game for the container.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.GetAllowedTechTypes(ItemsContainer)">
            <summary>
            Gets the set of techtypes allowed in  container. This set can be altered.
            If the set is null or empty, then all items can be added.
            </summary>
            <param name="container">The container to check.</param>
            <returns>
            The collection of techtypes allowed in the container.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.QModManager#API#SMLHelper#Utility#IItemStorageHelper#HasRoomForCached(ItemsContainer,System.Int32,System.Int32)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="width">The item width.</param>
            <param name="height">The item height.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.QModManager#API#SMLHelper#Utility#IItemStorageHelper#HasRoomForCached(ItemsContainer,Vector2int)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="itemSize">Size of the item.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.QModManager#API#SMLHelper#Utility#IItemStorageHelper#IsEmpty(ItemsContainer)">
            <summary>
            Determines whether the specified container is empty.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.QModManager#API#SMLHelper#Utility#IItemStorageHelper#IsFull(ItemsContainer)">
            <summary>
            Determines whether the specified container is full.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is full; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.QModManager#API#SMLHelper#Utility#IItemStorageHelper#GetTotalSlots(ItemsContainer)">
            <summary>
            The totals number of 1x1 slots in the container, as calculated by the container's width and height.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.QModManager#API#SMLHelper#Utility#IItemStorageHelper#GetStorageLabel(ItemsContainer)">
            <summary>
            Get the inernal label for the storage container.
            </summary>
            <param name="container">The container.</param>
            <returns>
            The label used and displayed in-game for the container.
            </returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.ItemStorageHelper.QModManager#API#SMLHelper#Utility#IItemStorageHelper#GetAllowedTechTypes(ItemsContainer)">
            <summary>
            Gets the set of techtypes allowed in this container. This set can be altered.
            If the set is null or empty, then all items can be added.
            </summary>
            <param name="container">The container to check.</param>
            <returns>
            The collection of techtypes allowed in the container.
            </returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Utility.KeyCodeUtils">
            <summary>
            Utilities for <see cref="T:UnityEngine.KeyCode"/>s
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.KeyCodeUtils.KeyCodeToString(UnityEngine.KeyCode)">
            <summary>
            Turn a <seealso cref="T:UnityEngine.KeyCode"/> into a <seealso cref="T:System.String"/>
            </summary>
            <param name="keyCode"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.KeyCodeUtils.StringToKeyCode(System.String)">
            <summary>
            Turn a <seealso cref="T:System.String"/> into a <seealso cref="T:UnityEngine.KeyCode"/>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:QModManager.API.SMLHelper.Utility.PrefabUtils">
            <summary>
            Utilities for prefabs
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.PrefabUtils.AddBasicComponents(UnityEngine.GameObject,System.String)">
            <summary>
            Adds basic components to a <see cref="T:UnityEngine.GameObject"/>
            </summary>
            <param name="_object">The <see cref="T:UnityEngine.GameObject"/> to which the components should be added</param>
            <param name="classId">The desired class ID</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Utility.SaveUtils">
            <summary>
            Utilities for saved games
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Utility.SaveUtils.GetCurrentSaveDataDir">
            <summary>
            Returns the path to the current save slot's directory.
            </summary>
        </member>
        <member name="T:QModManager.API.SMLHelper.Options.ChoiceChangedEventArgs">
            <summary>
            Contains all the information about a choice changed event.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ChoiceChangedEventArgs.Id">
            <summary>
            The ID of the <see cref="T:QModManager.API.SMLHelper.Options.ModChoiceOption"/> that was changed.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ChoiceChangedEventArgs.Index">
            <summary>
            The new index for the <see cref="T:QModManager.API.SMLHelper.Options.ModChoiceOption"/>.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ChoiceChangedEventArgs.Value">
            <summary>
            The value of the <see cref="T:QModManager.API.SMLHelper.Options.ModChoiceOption"/> as a string
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ChoiceChangedEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:QModManager.API.SMLHelper.Options.ChoiceChangedEventArgs"/>
            </summary>
            <param name="id"></param>
            <param name="index"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ChoiceChangedEventArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a new instance of <see cref="T:QModManager.API.SMLHelper.Options.ChoiceChangedEventArgs"/>
            </summary>
            <param name="id"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Options.ModOptions">
            <summary>
            Abstract class that provides the framework for your mod's in-game configuration options.
            </summary>
        </member>
        <member name="E:QModManager.API.SMLHelper.Options.ModOptions.ChoiceChanged">
            <summary>
            The event that is called whenever a choice is changed. Subscribe to this in the constructor.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.OnChoiceChange(System.String,System.Int32)">
            <summary>
            Notifies a choice change to all subscribed event handlers.
            </summary>
            <param name="id"></param>
            <param name="indexValue"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.OnChoiceChange(System.String,System.Int32,System.String)">
            <summary>
            Notifies a choice change to all subscribed event handlers.
            </summary>
            <param name="id"></param>
            <param name="indexValue"></param>
            <param name="value"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.AddChoiceOption(System.String,System.String,System.String[],System.Int32)">
            <summary>
            Adds a new <see cref="T:QModManager.API.SMLHelper.Options.ModChoiceOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="options">The collection of available values.</param>
            <param name="index">The starting value.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.AddChoiceOption(System.String,System.String,System.String[],System.String)">
            <summary>
            Adds a new <see cref="T:QModManager.API.SMLHelper.Options.ModChoiceOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="options">The collection of available values.</param>
            <param name="value">The starting value.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.AddChoiceOption(System.String,System.String,System.Object[],System.Int32)">
            <summary>
            Adds a new <see cref="T:QModManager.API.SMLHelper.Options.ModChoiceOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="options">The collection of available values.</param>
            <param name="index">The starting value.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.AddChoiceOption(System.String,System.String,System.Object[],System.Object)">
            <summary>
            Adds a new <see cref="T:QModManager.API.SMLHelper.Options.ModChoiceOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="options">The collection of available values.</param>
            <param name="value">The starting value.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.AddChoiceOption``1(System.String,System.String,``0)">
            <summary>
            Adds a new <see cref="T:QModManager.API.SMLHelper.Options.ModChoiceOption"/> to this instance, automatically using the values of an enum
            </summary>
            <typeparam name="T">The enum which will be used to populate the options</typeparam>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="value">The starting value</param>
        </member>
        <member name="E:QModManager.API.SMLHelper.Options.ModOptions.KeybindChanged">
            <summary>
            The event that is called whenever a keybind is changed. Subscribe to this in the constructor.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.OnKeybindChange(System.String,UnityEngine.KeyCode)">
            <summary>
            Notifies a keybind change to all subscribed event handlers.
            </summary>
            <param name="id"></param>
            <param name="key"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.AddKeybindOption(System.String,System.String,GameInput.Device,UnityEngine.KeyCode)">
            <summary>
            Adds a new <see cref="T:QModManager.API.SMLHelper.Options.ModKeybindOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the toggle option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="device">The device name.</param>
            <param name="key">The starting keybind value.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.AddKeybindOption(System.String,System.String,GameInput.Device,System.String)">
            <summary>
            Adds a new <see cref="T:QModManager.API.SMLHelper.Options.ModKeybindOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the toggle option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="device">The device name.</param>
            <param name="key">The starting keybind value.</param>
        </member>
        <member name="F:QModManager.API.SMLHelper.Options.ModOptions.Name">
            <summary>
            The name of this set of configuration options.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModOptions.Options">
            <summary>
            Builds and obtains the <see cref="T:QModManager.API.SMLHelper.Options.ModOption"/>s that belong to this instance.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.#ctor(System.String)">
            <summary>
            Creates a new insteance of <see cref="T:QModManager.API.SMLHelper.Options.ModOptions"/>.
            </summary>
            <param name="name">The name that will display above this section of options in the in-game menu.</param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.BuildModOptions">
            <summary>
            <para>Builds up the configuration the options.</para>
            <para>This method should be composed of calls into the following methods: 
            <seealso cref="M:QModManager.API.SMLHelper.Options.ModOptions.AddSliderOption(System.String,System.String,System.Single,System.Single,System.Single)"/> | <seealso cref="M:QModManager.API.SMLHelper.Options.ModOptions.AddToggleOption(System.String,System.String,System.Boolean)"/> | <seealso cref="M:QModManager.API.SMLHelper.Options.ModOptions.AddChoiceOption(System.String,System.String,System.String[],System.Int32)"/> | <seealso cref="M:QModManager.API.SMLHelper.Options.ModOptions.AddKeybindOption(System.String,System.String,GameInput.Device,UnityEngine.KeyCode)"/>.</para>
            <para>Make sure you have subscribed to the events in the constructor to handle what happens when the value is changed:
            <seealso cref="E:QModManager.API.SMLHelper.Options.ModOptions.SliderChanged"/> | <seealso cref="E:QModManager.API.SMLHelper.Options.ModOptions.ToggleChanged"/> | <seealso cref="E:QModManager.API.SMLHelper.Options.ModOptions.ChoiceChanged"/> | <seealso cref="E:QModManager.API.SMLHelper.Options.ModOptions.KeybindChanged"/>.</para>
            </summary>
        </member>
        <member name="E:QModManager.API.SMLHelper.Options.ModOptions.SliderChanged">
            <summary>
            The event that is called whenever a slider is changed. Subscribe to this in the constructor.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.OnSliderChange(System.String,System.Single)">
            <summary>
            Notifies a slider change to all subsribed event handlers.
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.AddSliderOption(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Adds a new <see cref="T:QModManager.API.SMLHelper.Options.ModSliderOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the slider option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="minValue">The minimum value for the range.</param>
            <param name="maxValue">The maximum value for the range.</param>
            <param name="value">The starting value.</param>
        </member>
        <member name="E:QModManager.API.SMLHelper.Options.ModOptions.ToggleChanged">
            <summary>
            The event that is called whenever a toggle is changed. Subscribe to this in the constructor.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.OnToggleChange(System.String,System.Boolean)">
            <summary>
            Notifies a toggle change to all subscribed event handlers.
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOptions.AddToggleOption(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new <see cref="T:QModManager.API.SMLHelper.Options.ModToggleOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the toggle option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="value">The starting value.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Options.ModChoiceOption">
            <summary>
            A mod option class for handling an option that can select one item from a list of values.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModChoiceOption.Options">
            <summary>
            The options that are available
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModChoiceOption.Index">
            <summary>
            The index of the selected option
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModChoiceOption.#ctor(System.String,System.String,System.String[],System.Int32)">
            <summary>
            Instantiates a new <see cref="T:QModManager.API.SMLHelper.Options.ModChoiceOption"/> for handling an option that can select one item from a list of values.
            </summary>
            <param name="id">The internal ID of this option.</param>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="options">The collection of available values.</param>
            <param name="index">The starting value.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Options.KeybindChangedEventArgs">
            <summary>
            Contains all the information about a keybind changed event.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.KeybindChangedEventArgs.Id">
            <summary>
            The ID of the <see cref="T:QModManager.API.SMLHelper.Options.ModKeybindOption"/> that was changed.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.KeybindChangedEventArgs.Key">
            <summary>
            The new value for the <see cref="T:QModManager.API.SMLHelper.Options.ModKeybindOption"/>.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.KeybindChangedEventArgs.KeyName">
            <summary>
            The new value for the <see cref="T:QModManager.API.SMLHelper.Options.ModKeybindOption"/> parsed as a <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.KeybindChangedEventArgs.#ctor(System.String,UnityEngine.KeyCode)">
            <summary>
            Creates a new instance of <see cref="T:QModManager.API.SMLHelper.Options.KeybindChangedEventArgs"/>
            </summary>
            <param name="id"></param>
            <param name="key"></param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Options.ModKeybindOption">
            <summary>
            A mod option class for handling an option that is a keybind.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModKeybindOption.Key">
            <summary>
            The current <see cref="T:UnityEngine.KeyCode"/> value
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModKeybindOption.Device">
            <summary>
            The <see cref="T:GameInput.Device"/> that this option is applied to
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModKeybindOption.#ctor(System.String,System.String,GameInput.Device,UnityEngine.KeyCode)">
            <summary>
            Instantiates a new <see cref="T:QModManager.API.SMLHelper.Options.ModKeybindOption"/> for handling an option that is a keybind.
            </summary>
            <param name="id">The internal ID of this option.</param>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="device">The device name.</param>
            <param name="key">The starting keybind value.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Options.ModOptionType">
            <summary>
            Indicates how the option is interacted with by the user.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Options.ModOptionType.Slider">
            <summary>
            The option uses a slider that allows for a choice within a continues range of values within a maximum and minimum.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Options.ModOptionType.Toggle">
            <summary>
            The option uses a checkbox that can be either enabled or disabled.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Options.ModOptionType.Choice">
            <summary>
            The option uses a selection of one of a discrete number of possible values.
            </summary>
        </member>
        <member name="F:QModManager.API.SMLHelper.Options.ModOptionType.Keybind">
            <summary>
            The option uses a keybind field that can be changed to a certain keyt
            </summary>
        </member>
        <member name="T:QModManager.API.SMLHelper.Options.ModOption">
            <summary>
            The common abstract class to all mod options.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModOption.Id">
            <summary>
            The internal ID that identifies this option.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModOption.Label">
            <summary>
            The display text to be shown for this option in the in-game menus.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModOption.Type">
            <summary>
            The type of option for this instance.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModOption.#ctor(QModManager.API.SMLHelper.Options.ModOptionType,System.String,System.String)">
            <summary>
            Base constructor for all mod options.
            </summary>
            <param name="type">The mod option type.</param>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="id">The internal ID if this option.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Options.SliderChangedEventArgs">
            <summary>
            Contains all the information about a slider changed event.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.SliderChangedEventArgs.Id">
            <summary>
            The ID of the <see cref="T:QModManager.API.SMLHelper.Options.ModSliderOption"/> that was changed.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.SliderChangedEventArgs.Value">
            <summary>
            The new value for the <see cref="T:QModManager.API.SMLHelper.Options.ModSliderOption"/>.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.SliderChangedEventArgs.IntegerValue">
            <summary>
            The new value for the <see cref="T:QModManager.API.SMLHelper.Options.ModSliderOption"/> parsed as an <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.SliderChangedEventArgs.#ctor(System.String,System.Single)">
            <summary>
            Creates a new instance of <see cref="T:QModManager.API.SMLHelper.Options.SliderChangedEventArgs"/>
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Options.ModSliderOption">
            <summary>
            A mod option class for handling an option that can have any floating point value between a minimum and maximum.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModSliderOption.MinValue">
            <summary>
            The minimum value of the slider
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModSliderOption.MaxValue">
            <summary>
            The maximum value of the slider
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModSliderOption.Value">
            <summary>
            The current value of the slider
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModSliderOption.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Instantiates a new <see cref="T:QModManager.API.SMLHelper.Options.ModSliderOption"/> for handling an option that can have any floating point value between a minimum and maximum.
            </summary>
            <param name="id">The internal ID of this option.</param>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="minValue">The minimum value for the range.</param>
            <param name="maxValue">The maximum value for the range.</param>
            <param name="value">The starting value.</param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Options.ToggleChangedEventArgs">
            <summary>
            Contains all the information about a toggle changed event.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ToggleChangedEventArgs.Id">
            <summary>
            The ID of the <see cref="T:QModManager.API.SMLHelper.Options.ModToggleOption"/> that was changed.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ToggleChangedEventArgs.Value">
            <summary>
            The new value for the <see cref="T:QModManager.API.SMLHelper.Options.ModToggleOption"/>.
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ToggleChangedEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:QModManager.API.SMLHelper.Options.ToggleChangedEventArgs"/>
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="T:QModManager.API.SMLHelper.Options.ModToggleOption">
            <summary>
            A mod option class for handling an option that can be either ON or OFF.
            </summary>
        </member>
        <member name="P:QModManager.API.SMLHelper.Options.ModToggleOption.Value">
            <summary>
            The current value
            </summary>
        </member>
        <member name="M:QModManager.API.SMLHelper.Options.ModToggleOption.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Instantiates a new <see cref="T:QModManager.API.SMLHelper.Options.ModToggleOption"/> for handling an option that can be either ON or OFF.
            </summary>
            <param name="id">The internal ID of this option.</param>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="value">The starting value.</param>
        </member>
        <member name="T:QModManager.Checks.PirateCheck">
            <summary>
            Utility class which detects whether or not the game is pirated
            </summary>
        </member>
        <member name="P:QModManager.Checks.PirateCheck.IsPirate">
            <summary>
            Whether or not the game is pirated
            </summary>
        </member>
        <member name="T:QModManager.Utility.IOUtilities">
            <summary>
            Utilities for files and paths
            </summary>
        </member>
        <member name="M:QModManager.Utility.IOUtilities.Combine(System.String,System.String,System.String[])">
            <summary>
            Works like <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>, but can have more than 2 paths
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="T:QModManager.Utility.ExtensionMethods">
            <summary>
            Miscellaneous extension methods to make your life easier
            </summary>
        </member>
        <member name="M:QModManager.Utility.ExtensionMethods.ToStringParsed(System.Version)">
            <summary>
            Turns a <see cref="T:System.Version"/> into its <see cref="T:System.String"/> representation and removes all leading zeroes
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.Utility.ExtensionMethods.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            Gets a component from a <see cref="T:UnityEngine.GameObject"/>, or adds it if it doesn't exist
            </summary>
            <typeparam name="T"></typeparam>
            <param name="gameObject"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.Utility.ExtensionMethods.GetOrAddComponent``1(UnityEngine.MonoBehaviour)">
            <summary>
            Gets a component from a <see cref="T:UnityEngine.GameObject"/>, or adds it if it doesn't exist
            </summary>
            <typeparam name="T"></typeparam>
            <param name="behaviour"></param>
            <returns></returns>
        </member>
        <member name="T:QModManager.QMod">
            <summary>
            A class containing information about a mod
            </summary>
        </member>
        <member name="P:QModManager.QMod.QModManagerQMod">
            <summary>
            The dummy <see cref="T:QModManager.QMod"/> which is used to represent QModManager
            </summary>
        </member>
        <member name="P:QModManager.QMod.Id">
            <summary>
            The ID of the mod <para/>
            Can only contain alphanumeric characters and underscores: (<see langword="a-z"/>, <see langword="A-Z"/>, <see langword="0-9"/>, <see langword="_"/>)
            </summary>
        </member>
        <member name="P:QModManager.QMod.DisplayName">
            <summary>
            The display name of the mod
            </summary>
        </member>
        <member name="P:QModManager.QMod.Author">
            <summary>
            The author of the mod
            </summary>
        </member>
        <member name="P:QModManager.QMod.Version">
            <summary>
            The version of the mod <para/>
            Should be have this form: <see langword="MAJOR"/>.<see langword="MINOR"/>.<see langword="BUILD"/>.<see langword="REVISION"/>
            </summary>
        </member>
        <member name="P:QModManager.QMod.Dependencies">
            <summary>
            The dependencies of the mod <para/>
            If you also want to specify the version of required dependencies, see <see cref="P:QModManager.QMod.VersionDependencies"/>
            </summary>
        </member>
        <member name="P:QModManager.QMod.VersionDependencies">
            <summary>
            The version dependencies of the mod <para/>
            </summary>
        </member>
        <member name="P:QModManager.QMod.LoadBefore">
            <summary>
            A list of mods before which this mod will load
            </summary>
        </member>
        <member name="P:QModManager.QMod.LoadAfter">
            <summary>
            A list of mods after which this mod will load
            </summary>
        </member>
        <member name="P:QModManager.QMod.Enable">
            <summary>
            Whether or not this mod is enabled
            </summary>
        </member>
        <member name="P:QModManager.QMod.Game">
            <summary>
            The game of this mod <para/>
            Should be <see langword="Subnautica"/>, <see langword="BelowZero"/>, or <see langword="Both"/>
            </summary>
        </member>
        <member name="P:QModManager.QMod.AssemblyName">
            <summary>
            The assembly name of the mod (including <see langword=".dll"/>)
            </summary>
        </member>
        <member name="P:QModManager.QMod.EntryMethod">
            <summary>
            The entry method of the mod <para/>
            Should have this form: <see langword="NAMESPACE"/>.<see langword="CLASS"/>.<see langword="METHOD"/>
            </summary>
        </member>
        <member name="P:QModManager.QMod.LoadedAssembly">
            <summary>
            The assembly of this mod <para/>
            Check if <see langword="null"/> before using
            </summary>
        </member>
        <member name="P:QModManager.QMod.ParsedVersion">
            <summary>
            The parsed <see cref="P:QModManager.QMod.Version"/> of this mod
            </summary>
        </member>
        <member name="P:QModManager.QMod.ParsedGame">
            <summary>
            The parsed <see cref="T:QModManager.Patcher.Game"/> of this mod
            </summary>
        </member>
        <member name="P:QModManager.QMod.ModAssemblyPath">
            <summary>
            The dll path of this mod
            </summary>
        </member>
        <member name="P:QModManager.QMod.Loaded">
            <summary>
            Whether or not this mod is loaded
            </summary>
        </member>
        <member name="T:QModManager.IQMod">
            <summary>
            A read-only <see cref="T:QModManager.QMod"/>
            </summary>
        </member>
        <member name="P:QModManager.IQMod.Id">
            <summary>
            The ID of the mod <para/>
            Can only contain alphanumeric characters and underscores: (<see langword="a-z"/>, <see langword="A-Z"/>, <see langword="0-9"/>, <see langword="_"/>)
            </summary>
        </member>
        <member name="P:QModManager.IQMod.DisplayName">
            <summary>
            The display name of the mod
            </summary>
        </member>
        <member name="P:QModManager.IQMod.Author">
            <summary>
            The author of the mod
            </summary>
        </member>
        <member name="P:QModManager.IQMod.Version">
            <summary>
            The version of the mod <para/>
            Should be have this form: <see langword="MAJOR"/>.<see langword="MINOR"/>.<see langword="BUILD"/>.<see langword="REVISION"/>
            </summary>
        </member>
        <member name="P:QModManager.IQMod.Dependencies">
            <summary>
            The dependencies of the mod <para/>
            If you also want to specify the version of required dependencies, see <see cref="P:QModManager.IQMod.VersionDependencies"/>
            </summary>
        </member>
        <member name="P:QModManager.IQMod.VersionDependencies">
            <summary>
            The version dependencies of the mod <para/>
            </summary>
        </member>
        <member name="P:QModManager.IQMod.LoadBefore">
            <summary>
            A list of mods before which this mod will load
            </summary>
        </member>
        <member name="P:QModManager.IQMod.LoadAfter">
            <summary>
            A list of mods after which this mod will load
            </summary>
        </member>
        <member name="P:QModManager.IQMod.Enable">
            <summary>
            Whether or not this mod is enabled
            </summary>
        </member>
        <member name="P:QModManager.IQMod.Game">
            <summary>
            The game of this mod <para/>
            Should be <see langword="Subnautica"/>, <see langword="BelowZero"/>, or <see langword="Both"/>
            </summary>
        </member>
        <member name="P:QModManager.IQMod.AssemblyName">
            <summary>
            The assembly name of the mod (including <see langword=".dll"/>)
            </summary>
        </member>
        <member name="P:QModManager.IQMod.EntryMethod">
            <summary>
            The entry method of the mod <para/>
            Should have this form: <see langword="NAMESPACE"/>.<see langword="CLASS"/>.<see langword="METHOD"/>
            </summary>
        </member>
        <member name="P:QModManager.IQMod.LoadedAssembly">
            <summary>
            The assembly of this mod <para/>
            Check if <see langword="null"/> before using
            </summary>
        </member>
        <member name="P:QModManager.IQMod.ParsedVersion">
            <summary>
            The parsed <see cref="P:QModManager.IQMod.Version"/> of this mod
            </summary>
        </member>
        <member name="P:QModManager.IQMod.ParsedGame">
            <summary>
            The parsed <see cref="F:QModManager.Patcher.game"/> of this mod
            </summary>
        </member>
        <member name="P:QModManager.IQMod.ModAssemblyPath">
            <summary>
            The dll path of this mod
            </summary>
        </member>
        <member name="P:QModManager.IQMod.Loaded">
            <summary>
            Whether or not this mod is loaded
            </summary>
        </member>
        <member name="T:QModManager.Patcher">
            <summary>
            The main class which handles all of QModManager's patching
            </summary>
        </member>
        <member name="T:QModManager.Patcher.Game">
            <summary>
            An enum which contains possible values for <see cref="P:QModManager.IQMod.ParsedGame"/>
            </summary>
        </member>
        <member name="F:QModManager.Patcher.Game.None">
            <summary>
            No game was detected <para/>
            In theory, this should never be the case
            </summary>
        </member>
        <member name="F:QModManager.Patcher.Game.Subnautica">
            <summary>
            Subnautica was detected
            </summary>
        </member>
        <member name="F:QModManager.Patcher.Game.BelowZero">
            <summary>
            Below Zero was detected
            </summary>
        </member>
        <member name="F:QModManager.Patcher.Game.Both">
            <summary>
            Both games were detected <para/>
            In theory, this should never be the case
            </summary>
        </member>
        <member name="T:QModInstaller.QModPatcher">
            <summary>
            Container class for the entry point <para/>
            NOT FOR MANUAL USAGE!
            </summary>
        </member>
        <member name="M:QModInstaller.QModPatcher.Patch">
            <summary>
            QModManager entry point <para/>
            NOT FOR MANUAL USAGE!
            </summary>
        </member>
    </members>
</doc>
