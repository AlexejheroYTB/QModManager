<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QModInstaller</name>
    </assembly>
    <members>
        <member name="T:QModManager.API.ModLoading.IQMod">
            <summary>
            All public data about a QMod.
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.Id">
            <summary>
            The ID of the mod <para/>
            Can only contain alphanumeric characters and underscores: (<see langword="a-z"/>, <see langword="A-Z"/>, <see langword="0-9"/>, <see langword="_"/>)
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.DisplayName">
            <summary>
            The display name of the mod
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.Author">
            <summary>
            The author of the mod
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.SupportedGame">
            <summary>
            The game this mod was developed for.
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.RequiredMods">
            <summary>
            The dependencies of the mod and their optional minimum required version
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.ModsToLoadBefore">
            <summary>
            A list of mods, before which, this mod will load
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.ModsToLoadAfter">
            <summary>
            A list of mods, after which, this mod will load
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.LoadedAssembly">
            <summary>
            The assembly of this mod <para/>
            Check if <see langword="null"/> before using
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.AssemblyName">
            <summary>
            The assembly name of the mod
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.ParsedVersion">
            <summary>
            The version of the mod.
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.Enable">
            <summary>
            Whether or not this mod is enabled
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.IQMod.IsLoaded">
            <summary>
            Whether or not this mod has been loaded
            </summary>
        </member>
        <member name="T:QModManager.API.ModLoading.PatchResults">
            <summary>
            An optional value that can be returned from a mod patching method.
            </summary>
        </member>
        <member name="F:QModManager.API.ModLoading.PatchResults.OK">
            <summary>
            The patch method ran successfully.<para/>
            A method that returns <seealso cref="T:System.Void"/> and does not through an exception will default to this value.
            </summary>
        </member>
        <member name="F:QModManager.API.ModLoading.PatchResults.Error">
            <summary>
            The patch method encountered an error.<para/>
            Execution of any further patch methods this mod implements will be skipped.
            </summary>
        </member>
        <member name="F:QModManager.API.ModLoading.PatchResults.ModderCanceled">
            <summary>
            Informs that the mod author has requested that patching be halted for this mod.<para/>
            Execution of any further patch methods this mod implements will be skipped.<para/>
            This doesn't necessarily imply that and error happened, so it will be handled silently.
            </summary>
        </member>
        <member name="T:QModManager.API.ModLoading.RequiredQMod">
            <summary>
            Identifies a required mod and an optional minimum version.
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.RequiredQMod.Id">
            <summary>
            Gets the required mod's ID.
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.RequiredQMod.RequiresMinimumVersion">
            <summary>
            Gets a value indicating whether the mod must be at a minimum version for compatibility.
            </summary>
        </member>
        <member name="P:QModManager.API.ModLoading.RequiredQMod.MinimumVersion">
            <summary>
            Gets the minimum version this mod should be at.<para/>
            If <see cref="P:QModManager.API.ModLoading.RequiredQMod.RequiresMinimumVersion"/> is <c>false</c>, this will return a default value.
            </summary>
        </member>
        <member name="T:QModManager.API.QModGame">
            <summary>
            Identifies the Subnautica games.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.None">
            <summary>
            No game.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.Subnautica">
            <summary>
            Subnautica.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.BelowZero">
            <summary>
            Subnautica: Below Zero.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.Both">
            <summary>
            Both Subnautica and Below Zero.
            </summary>
        </member>
        <member name="T:QModManager.Checks.PirateCheck">
            <summary>
            Utility class which detects whether or not the game is pirated
            </summary>
        </member>
        <member name="P:QModManager.Checks.PirateCheck.IsPirate">
            <summary>
            Whether or not the game is pirated
            </summary>
        </member>
        <member name="T:QModManager.DataStructures.ISortable`1">
            <summary>
            Requirements to function within the <seealso cref="T:QModManager.DataStructures.SortedCollection`2"/>
            </summary>
            <typeparam name="IdType">The ID type.</typeparam>
        </member>
        <member name="T:QModManager.Patching.Patcher">
            <summary>
            The main class which handles all of QModManager's patching
            </summary>
        </member>
        <member name="T:QModManager.Patching.IQModSerialiable">
            <summary>
            Enforces the requirements of the mod.json file for legacy mod loading.
            </summary>
        </member>
        <member name="F:QModManager.Patching.PatchingOrder.PreInitialize">
            <summary>
            For pre-initialize patch methods
            </summary>
        </member>
        <member name="F:QModManager.Patching.PatchingOrder.NormalInitialize">
            <summary>
            For normal patch methods
            </summary>
        </member>
        <member name="F:QModManager.Patching.PatchingOrder.PostInitialize">
            <summary>
            For post-initialize patch methods
            </summary>
        </member>
        <member name="T:QModManager.Patching.QModPatchAttributeBase">
            <summary>
            Base class to all attributes that identify QMod patch methods.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QModManager.Patching.QModPatchAttributeBase.#ctor(QModManager.Patching.PatchingOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.Patching.QModPatchAttributeBase"/> class.
            </summary>
            <param name="patchOrder">The patch order.</param>
        </member>
        <member name="P:QModManager.Patching.QModPlaceholder.QModManager">
            <summary>
            The dummy <see cref="T:QModManager.Patching.QMod"/> which is used to represent QModManager
            </summary>
        </member>
        <member name="T:QModManager.Utility.IOUtilities">
            <summary>
            Utilities for files and paths
            </summary>
        </member>
        <member name="M:QModManager.Utility.IOUtilities.Combine(System.String,System.String,System.String[])">
            <summary>
            Works like <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>, but can have more than 2 paths
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="T:QModManager.Utility.ExtensionMethods">
            <summary>
            Miscellaneous extension methods to make your life easier
            </summary>
        </member>
        <member name="M:QModManager.Utility.ExtensionMethods.ToStringParsed(System.Version)">
            <summary>
            Turns a <see cref="T:System.Version"/> into its <see cref="T:System.String"/> representation and removes all leading zeroes
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.Utility.ExtensionMethods.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            Gets a component from a <see cref="T:UnityEngine.GameObject"/>, or adds it if it doesn't exist
            </summary>
            <typeparam name="T"></typeparam>
            <param name="gameObject"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.Utility.ExtensionMethods.GetOrAddComponent``1(UnityEngine.MonoBehaviour)">
            <summary>
            Gets a component from a <see cref="T:UnityEngine.GameObject"/>, or adds it if it doesn't exist
            </summary>
            <typeparam name="T"></typeparam>
            <param name="behaviour"></param>
            <returns></returns>
        </member>
        <member name="T:QModInstaller.QModPatcher">
            <summary>
            Container class for the entry point <para/>
            NOT FOR MANUAL USAGE!
            </summary>
        </member>
        <member name="M:QModInstaller.QModPatcher.Patch">
            <summary>
            QModManager entry point <para/>
            NOT FOR MANUAL USAGE!
            </summary>
        </member>
    </members>
</doc>
